/Pattern minimum(maximum ) -> so binary search  

// if the number of student is more than number of book than - 1

--------------------------------->  Brute Force Approach

-> we make a limit the max pages in case we iterate check can we put sum of two pages in one student if we not then we move next student in case none pf them 
satisy then as more student to allocate the student thus we incresae the limit 

lower limit -> max elment 
Upper limit -> one studet )sumof all the elment ina rray ] 



class BookAllocator {
public:
    // Function to count the number of students required to allocate books
    int countStudents(vector<int> &arr, int pages) {
        int n = arr.size(); // Size of the array
        int students = 1; // Start with one student
        long long pagesStudent = 0; // Pages allocated to the current student
        
        for (int i = 0; i < n; i++) {
            if (pagesStudent + arr[i] <= pages) {
                // Add pages to the current student
                pagesStudent += arr[i];
            } else {
                // Move to the next student
                students++;
                pagesStudent = arr[i]; // Start with the current book for the new student
            }
        }
        return students; // Return the total number of students
    }

    // Function to find the minimum number of pages that can be allocated to students
    int findPages(vector<int>& arr, int n, int m) {
        // Book allocation impossible
        if (m > n) return -1;

        // Initialize low and high for binary search
        int low = *max_element(arr.begin(), arr.end());
        int high = accumulate(arr.begin(), arr.end(), 0);

        // Perform linear search from low to high
        for (int pages = low; pages <= high; pages++) {
            if (countStudents(arr, pages) == m) {
                return pages; // Return the minimum pages found
            }
        }
        return low; // Fallback, should not reach here
    }
};

----------------------------------------------------> Binary Search 


// Time: O(QlogM) where `Q` is the length of `quantities` and `M` is the max element in `quantities`.
// Space: O(1)


class Solution {
public:
    int minimizedMaximum(int n, vector<int>& Q) {
        long long L = 1, R = accumulate(begin(Q), end(Q), 0LL);
        auto valid = [&](int M) {
            int ans = 0;
            for (int n : Q) ans += (n + M - 1) / M; // ceil(n / M)
            return ans <= n;
        };
        while (L <= R) {
            long long M = (L + R) / 2;
            if (valid(M)) R = M - 1;
            else L = M + 1;
        }
        return L;
    }
};






int countStudents(vector<int> &arr, int pages) {
    int n = arr.size(); //size of array.
    int students = 1;
    long long pagesStudent = 0;
    for (int i = 0; i < n; i++) {
        if (pagesStudent + arr[i] <= pages) {
            //add pages to current student
            pagesStudent += arr[i];
        }
        else {
            //add pages to next student
            students++;
            pagesStudent = arr[i];
        }
    }
    return students;
}

int findPages(vector<int>& arr, int n, int m) {
    //book allocation impossible:
    if (m > n) return -1;

    int low = *max_element(arr.begin(), arr.end());
    int high = accumulate(arr.begin(), arr.end(), 0);
    while (low <= high) {
        int mid = (low + high) / 2;
        int students = countStudents(arr, mid);
        if (students > m) {
            low = mid + 1;
        }
        else {
            high = mid - 1;
        }
    }
    return low;
}















