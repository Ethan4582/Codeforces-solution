

brute force 

class Solution {
public:
    int numSubarraysWithSum(std::vector<int>& a, int k) {
        int n = a.size();
        int cnt = 0;

        for (int start = 0; start < n; start++) {
            int sum = 0;
            for (int end = start; end < n; end++) {
                sum += a[end];
                if (sum == k) {
                    cnt++;
                }
            }
        }

        return cnt;
    }
};


optmized  just like  prefix sum  map then exist x -k in map but we do for  evern and odd by convert to 1 , 0 

Time complexity: O(n)
Space complexity: O(n)
class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        int currSum = 0, subarrays = 0;
        unordered_map<int, int> prefixSum;
        prefixSum[currSum] = 1;

        for (int i = 0; i < nums.size(); i++) {
            currSum += nums[i] % 2;
            // Find subarrays with sum k ending at i.
            if (prefixSum.find(currSum - k) != prefixSum.end()) {
                subarrays = subarrays + prefixSum[currSum - k];
            }
            // Increment the current prefix sum in hashmap.
            prefixSum[currSum]++;
        }

        return subarrays;
    }
};


optmial 

class Solution {
public:
    int numSubarraysWithSum(std::vector<int>& a, int k) {
      int n = a.size();
        int ans = 0, sum = 0;
        std::unordered_map<int, int> mpp {{0, 1}}; // Initialize with prefix sum 0

        for (int i = 0; i < n; i++) {
            sum += a[i];
            if (mpp.find(sum - k) != mpp.end()) {
                ans += mpp[sum - k]; // Get the count of occurrences of (sum - k)
            }
            mpp[sum]++; 
        }

        return ans;
    }
};


//  most otpmial

now i can optmize the space 
// we can apply general sliding window as it contain 0 which can let us avlid the possible suubarry as we move the left whcih wrong 


Tc - 0(2 *2 *N)

Sc - 0(1)

class Solution {
public:
    int countgoal(vector<int>& nums, int goal){
        int n = nums.size(), ans = 0, sum = 0;
        int left = 0, right = 0;
        
        while(right < n){
            sum += nums[right];

            while(sum > goal && left <= right){
                sum -= nums[left];
                left++;
            }

            ans += right - left + 1;
            right++;
        }

        return ans;
    }
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int x = countgoal(nums, goal);
        int y = countgoal(nums, goal - 1);
        
        return x - y;
    }
};




conver the number to sum of binaary sum of eqaul to k 


Time complexity: O(n)
Space complexity: O(1)

class Solution {
public:
    int numberOfSubarrays(std::vector<int>& a, int k) {
        return atMostK(a, k) - atMostK(a, k - 1);
    }

private:
    int atMostK(std::vector<int>& a, int k) {
         int n = a.size(), ans = 0, sum = 0;
        int left = 0, right = 0;
        
        while(right < n){
            sum += a[right]%2;

            while(sum > k && left <= right){
                sum -= a[left]%2;
                left++;
            }

            ans += right - left + 1;
            right++;
        }

        return ans;
    }
};

