

Brute force 


Time Complexity: O(n^2) - This is expected for a brute force approach since we are checking all possible substrings.
Space Complexity: O(1)

class Solution {
public:
    int numberOfSubstrings(std::string s) {
        int n = s.size(); 
        int cnt = 0; 

        for (int i = 0; i < n; i++) {
            std::unordered_map<char, int> mpp; 
            for (int j = i; j < n; j++) {
                mpp[s[j]]++; 
                if (mpp.size() >= 3 && mpp.find('a') != mpp.end() && 
                    mpp.find('b') != mpp.end() && mpp.find('c') != mpp.end()) {
                    cnt++; 
                }
            }
        }

        return cnt; 
    }
};


// Optmized 
Time Complexity: O(n) - Each character is processed at most twice (once when added and once when removed).
Space Complexity: O(1) - 

class Solution {
public:
    int numberOfSubstrings(std::string s) {
        int n = s.size(); 
        int cnt = 0, l = 0, r = 0; 
        std::unordered_map<char, int> mpp;

        while (r < n) {
            mpp[s[r]]++; 
            while (mpp.size() >= 3 && 
                   mpp.find('a') != mpp.end() && 
                   mpp.find('b') != mpp.end() && 
                   mpp.find('c') != mpp.end()) {
                // Count all valid substrings ending at r
                cnt += (n - r); // All substrings from l to the end

                // Move the left pointer to reduce the window size
                mpp[s[l]]--; 
                if (mpp[s[l]] == 0) {
                    mpp.erase(s[l]); 
                }
                l++; 
            }
            r++; 
        }

        return cnt;
    }
};


//  most optmial 

find the min window substring that is valid we just and all the subtrung behing is the are also valid so for that substring the valid cnt last idx of substring +1 the poossible cnt  

we keep the count { -1, -1, -1}
if all are >1 then we have valid for sure but min of { this update} is the start idex if min valid substing + 1 is the count of all the substring that are valid also aw add all the left + 1 to get the all the vaid substring 

class Solution {
public:
    int numberOfSubstrings(std::string s) {
        int n = s.size(); 
        int lastseen[3] = {-1, -1, -1}; 
        int cnt = 0;

        for (int i = 0; i < n; i++) {
            lastseen[s[i] - 'a'] = i;
            
            
            if (lastseen[0] != -1 && lastseen[1] != -1 && lastseen[2] != -1) {
                
                cnt += (1 + std::min({lastseen[0], lastseen[1], lastseen[2]}));
            }
        }

        return cnt; 
    }
};

