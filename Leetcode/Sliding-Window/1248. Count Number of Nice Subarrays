

brute force apprach 


class Solution {
public:
    int numberOfSubarrays(std::vector<int>& a, int k) {
        int n = a.size(); 
        int cnt = 0;

        for (int i = 0; i < n; i++) {
            int oddCount = 0; 
            for (int j = i; j < n; j++) {
               
                if (a[j] % 2 != 0) {
                    oddCount++;
                }
                
              
                if (oddCount == k) {
                    cnt++;
                }
            }
        }
        return cnt;
    }
};



optmial solution - 

can also convert the odd to 1 and even to 9 and now it become the question of sum of binary sum in the subaary eqaul  to k 

class Solution {
public:
    int numberOfSubarrays(std::vector<int>& a, int k) {
        return atMostK(a, k) - atMostK(a, k - 1);
    }

private:
    int atMostK(std::vector<int>& a, int k) {
        int count = 0, left = 0, oddCount = 0;

        for (int right = 0; right < a.size(); right++) {
            // Count the odd number
            if (a[right] % 2 != 0) {
                oddCount++;
            }

            // Shrink the window until we have at most k odd numbers
            while (oddCount > k) {
                if (a[left] % 2 != 0) {
                    oddCount--;
                }
                left++;
            }

            // Count the number of valid subarrays ending at `right`
            count += right - left + 1;
        }

        return count;
    }
};