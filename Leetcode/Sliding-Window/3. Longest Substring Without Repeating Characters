// Time: O(N^2)
// Space: O(C) where C is the range of character set
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n= s.size(); 
        int len=0 ;
        for ( int i =0 ; i <n; i++){
            unordered_set<char> seen ;  
            for ( int j =i ; j<n; j++ ){
                if(seen.find(s[j])!=seen.end()) break;
                seen.insert(s[j]);
                len= max(len , j-i+1); 
            }
        }
        return len;
    }
};
																	
																	

// Time: O(N)
// Space: O(C) where C is the range of character set


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
         int n = s.size();          // Length of the input string
        int max_len = 0; 
         vector<int> hash(128, -1);
         int l=0 , r=0;

         while(r<n){
            if(hash[s[r]]!=-1 ){
                // in case already apper once before
                if( hash[s[r]]>=l){
                    l=hash[s[r]]+1; // update the left idex 
                } 
            }
             max_len= max(max_len, r-l+1);
            //  upadte the window expanding 
            hash[s[r]]=r;
            r++;
         }

        return max_len;
    }
};

