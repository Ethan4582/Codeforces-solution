class Solution {
private: 
    void solve(int idx, int cnt, int x, vector<int>& curr, vector<int>& nm, vector<vector<int>>& st) {
        if (cnt > x) { // Stop if the current sum exceeds x
            return;
        }
        if (cnt == x) { // If the current sum equals x, add the current combination to the result
            st.push_back(curr);
            return; // Return to avoid further processing
        }

        for (int i = idx; i < nm.size(); i++) { // Start from idx to allow repeated use of the same number
            curr.push_back(nm[i]); 
            solve(i, cnt + nm[i], x, curr, nm, st); // Recur with updated count
            curr.pop_back(); // Backtrack to explore other combinations
        }
    }

public:
    vector<vector<int>> combinationSum(vector<int>& nm, int x) {
        vector<vector<int>> st; // Corrected initialization of result vector
        vector<int> curr; 
        solve(0, 0, x, curr, nm, st); // Start the recursion
        return st;
    }
};

/*
Time Complexity: O(2^n) in the worst case
Space Complexity: O(n)
*/ 



