
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> output;
        output.push_back({});
        for (int num : nums) {
            vector<vector<int>> newSubsets;
            for (vector<int> curr : output) {
                vector<int> temp = curr;
                temp.push_back(num);
                newSubsets.push_back(temp);
            }
            for (vector<int> curr : newSubsets) {
                output.push_back(curr);
            }
        }
        return output;
    }
};



class Solution {
private: 
void solve(int i ,vector<int>& nums, vector<int>& curr,  vector<vector<int>> &st ){
       st.push_back(curr ); 

    for(int j = i ; j < nums.size(); j++){
           curr.push_back(nums[j]);
        solve(j +1, nums, curr ,st);
        curr.pop_back();
    }
}
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> st; 
        vector<int> curr;
        solve(0 ,nums,curr , st);
        return st;
    }
};



class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> output;
        for (int i = pow(2, n); i < pow(2, n + 1); ++i) {
            // generate bitmask, from 0..00 to 1..11
            string bitmask = bitset<32>(i).to_string().substr(32 - n);
            // append subset corresponding to that bitmask
            vector<int> curr;
            for (int j = 0; j < n; ++j) {
                if (bitmask.at(j) == '1') curr.push_back(nums[j]);
            }
            output.push_back(curr);
        }
        return output;
    }
};