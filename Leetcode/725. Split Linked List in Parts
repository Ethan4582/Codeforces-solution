/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

 Time complexity: O(N), where N is the number of nodes in the linked list.
Space complexity:O(K), where k is the number of parts in which the linked list is split.

class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        // Create a vector of ListNode pointers to store the k parts.
        vector<ListNode*> parts(k, nullptr);
        int len = getsize(head);
        int n = len / k, r = len % k;
        ListNode* prev = nullptr; 
        ListNode* curr = head;

        for (int i = 0; i < k; i++, r--) {
            // Store the current node as the start of the current part.
            parts[i] = curr;
            for (int j = 0; j < n + (r > 0); j++) {
                // Traverse n + 1 nodes if there are remaining extra nodes (r > 0).
            // Otherwise, traverse only n nodes.
                prev = curr;
                curr = curr->next;
            }
             // Disconnect the current part from the rest of the list by setting 
            if (prev) prev->next = nullptr;
        }

        return parts;
    }

private:
    int getsize(ListNode* head) {
        int len = 0; 
        ListNode* temp = head; 
        while (temp != nullptr) {  
            len++;
            temp = temp->next;
        }
        return len;
    }
};
