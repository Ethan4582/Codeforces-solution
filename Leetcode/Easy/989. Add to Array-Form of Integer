class Solution {
private: 
    vector<int> solve(string a, string b) {
        reverse(begin(a), end(a));
        reverse(begin(b), end(b));
        int carry = 0;
        string ans;
        for (int i = 0; i < a.size() || i < b.size() || carry; ++i) {
            if (i < a.size()) carry += a[i] - '0';
            if (i < b.size()) carry += b[i] - '0';
            ans.push_back('0' + carry % 10);
            carry /= 10;
        }
        reverse(begin(ans), end(ans));
        vector<int> st; 
        for(char it : ans){
            st.push_back(it - '0');
        }
        return st;
    }
public:
    vector<int> addToArrayForm(vector<int>& num, int k) {
        string m; 
        for(auto it : num){
            m += to_string(it);
        }
        string s = to_string(k);
        return solve(m, s);
    }
};




class Solution {
public:
    vector<int> addToArrayForm(vector<int>& a, int k) {
          int N = a.size(), carry = 0;
        vector<int> ans;
        for (int i = N - 1; i >= 0 || k || carry;) {
            if(k){
                carry+=k%10;
                k/=10;
            }
            if (i >= 0) carry += a[i--];
            ans.push_back(carry % 10);
            carry /= 10;
        }
         reverse(begin(ans), end(ans));
        return ans;
    }
};