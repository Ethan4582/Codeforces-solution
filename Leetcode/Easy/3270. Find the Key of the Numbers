\\Time Complexity: O(1)
\\Space Complexity: O(1)


class Solution {
public:
    int generateKey(int num1, int num2, int num3) {
        // Convert numbers to strings with padding
        string str1 = to_string(num1);
        string str2 = to_string(num2);
        string str3 = to_string(num3);
        
        // Pad with leading zeros to ensure they are 4 digits
        str1.insert(str1.begin(), 4 - str1.size(), '0');
        str2.insert(str2.begin(), 4 - str2.size(), '0');
        str3.insert(str3.begin(), 4 - str3.size(), '0');

        // Initialize the key string
        string key;

        // Find the minimum digit for each position
        for (int i = 0; i < 4; ++i) {
            char minDigit = min({str1[i], str2[i], str3[i]});
            key += minDigit; // Append the minimum digit to the key
        }

        // Convert the key string to an integer to remove leading zeros
        return stoi(key); // This will return 0 if the key is "0000"
    }
};'

class Solution {
public:
    int generateKey(int num1, int num2, int num3) {
        const string st1 = cov(num1, 4);
        const string st2 = cov(num2, 4);
        const string st3 = cov(num3, 4);

        string ans; // Changed to mutable string

        for (int i = 0; i < 4; i++) {
            ans += min({st1[i], st2[i], st3[i]}); // Corrected min usage
        }

        return stoi(ans); // Convert string to integer
    }

private:
    string cov(int nums, int width) {
        ostringstream oss;
        oss.width(width);
        oss.fill('0');
        oss << nums; // Corrected insertion operator
        return oss.str(); // Return the formatted string
    }
};