// Time: O(N)
// Space: O(N)

class Solution {
 public:
  bool repeatedSubstringPattern(string s) {
    const string ss = s + s;
    return ss.substr(1, ss.length() - 2).find(s) != string::npos;
  }
};



Tc- O(N)
Sc- O(N)

class Solution {
private:
    // Function to compute the Longest Prefix Suffix (LPS) array
    vector<int> getLps(const string &s) {
        int N = s.size();
        vector<int> lps(N, 0);
        int length = 0; // Length of the previous longest prefix suffix
        int i = 1;

        while (i < N) {
            if (s[i] == s[length]) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1]; // Fall back to the previous LPS
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

public:
    bool repeatedSubstringPattern(string s) {
        int N = s.size();
        if (N == 0) return false; // Empty string case

        // Get the LPS array for the string
        vector<int> lps = getLps(s);
        
        // Length of the longest proper prefix which is also a suffix
        int len = lps[N - 1];

        // Check if the string can be constructed by repeating a substring
        // The condition checks if the length of the string minus the length of the last LPS
        // is a divisor of the total length of the string
        return len > 0 && N % (N - len) == 0;
    }
};

First, we build the KMP table.

Roughly speaking, dp[i+1] stores the maximum number of characters that the string is repeating itself up to position i.
Therefore, if a string repeats a length 5 substring 4 times, then the last entry would be of value 15.
To check if the string is repeating itself, we just need the last entry to be non-zero and str.size() to divide (str.size()-last entry).


// Space: O(N)
// Ref: https://leetcode.com/problems/repeated-substring-pattern/discuss/94397/C%2B%2B-O(n)-using-KMP-32ms-8-lines-of-code-with-brief-explanation.
class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int N = s.size(), j = -1;
        vector<int> lps(N + 1, -1);
        for (int i = 1; i <= N; ++i) {
            while (j >= 0 && s[i - 1] != s[j]) j = lps[j];
            lps[i] = ++j;
        }
        return lps[N] && (lps[N] % (N - lps[N])) == 0;
    }
};