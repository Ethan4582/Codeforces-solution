
--- Optmial --- 
// Time: O(N)
// Space: O(1)
class Solution {
public:
    vector<int> targetIndices(vector<int>& A, int target) {
        int cnt = 0, rank = 0; // `cnt` is the frequency of `target`, `rank` is the sum of frequencies of all numbers < target
        for (int n : A) {
            cnt += n == target;
            rank += n < target;
        }
        vector<int> ans;
        while (cnt--) ans.push_back(rank++);
        return ans;
    }
};


--brute force- 

Same for both - O(nlogn).

class Solution {
public:
    vector<int> targetIndices(vector<int>& nums, int target) {
        vector<int> ans; 
        sort(nums.begin(), nums.end()); 
        for( int i=0 ; i <nums.size(); i++){
            if(nums[i]==target){
                ans.push_back(i);
            }
        }
        return ans;
    }
};



class Solution {
public:
    vector<int> targetIndices(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<int> indices;

        // Find the lower and upper bounds for the target
        int lower = lower_bound(nums.begin(), nums.end(), target) - nums.begin();
        int upper = upper_bound(nums.begin(), nums.end(), target) - nums.begin();

        // Collect indices of the target
        for (int i = lower; i < upper; i++) {
            indices.push_back(i);
        }

        return indices;
    }
};
