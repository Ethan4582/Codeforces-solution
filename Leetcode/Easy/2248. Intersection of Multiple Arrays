

time complexity :O(m×n+klogk).
space complexity :O(M*N).

class Solution {
public:
    vector<int> intersection(vector<vector<int>>& nums) {
        unordered_map<int, int> mp; 
        vector<int> ans; 

        // Count occurrences of each element across all arrays
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                mp[nums[i][j]]++; // Increment the count for the element
            }
        }

        // Check which elements are present in all arrays
        for (const auto& it : mp) {
            if (it.second == nums.size()) { // Check if the count equals the number of arrays
                ans.push_back(it.first);
            }
        }

        // Sort the result before returning
        sort(ans.begin(), ans.end());
        return ans; 
    }
};

Time: O(Σnums[i])
Space: O(1001)=O(1)

class Solution {
 public:
  vector<int> intersection(vector<vector<int>>& nums) {
    vector<int> ans;
    vector<int> count(1001); // Create a count array to track occurrences

    // Count occurrences of each number in the input arrays
    for (const vector<int>& A : nums) {
      for (const int a : A) {
        ++count[a]; // Increment the count for each element
      }
    }

    // Check which elements are present in all arrays
    for (int i = 1; i < 1001; ++i) {
      if (count[i] == nums.size()) {
        ans.push_back(i); // If count matches the number of arrays, add to result
      }
    }

    return ans; // Return the intersection
  }
};
