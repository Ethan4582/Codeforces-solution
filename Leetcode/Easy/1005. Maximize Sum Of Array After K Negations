
Time complexity: O(sort) O(nlogn)

Space complexity: O(1)


class Solution {
public:
    int largestSumAfterKNegations(vector<int>& nums, int k) {
        // Sort the array in non-decreasing order
        ranges::sort(nums);

        // Iterate through the sorted array
        for (int i = 0; i < nums.size(); ++i) {
            // If the current number is positive or no negations left, break the loop
            if (nums[i] > 0 || k == 0)
                break;

            // Negate the current number
            nums[i] = -nums[i];
            // Decrement the count of remaining negations
            --k;
        }

        // Calculate the total sum of the array
        // If there are remaining negations (k is odd), negate the smallest element again
        // This is done by subtracting twice the minimum value from the sum
        return accumulate(nums.begin(), nums.end(), 0) -
               (k % 2) * ranges::min(nums) * 2;
    }
};