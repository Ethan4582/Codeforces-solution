

 optmized--------------  

 class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans; 
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue; // Skip duplicates
            int tar = -nums[i]; 
            int l = i + 1, r = n - 1;
            while (l < r) {
                int sum = nums[l] + nums[r];
                if (sum == tar) {
                    ans.push_back({nums[i], nums[l], nums[r]}); 
                    while (l < r && nums[l] == nums[l + 1]) l++; // Skip duplicates
                    while (l < r && nums[r] == nums[r - 1]) r--; // Skip duplicates
                    l++; r--;
                } else if (sum < tar) {
                    l++;
                } else {
                    r--;
                }
            }
        }
        return ans; 
    }
};

// Time: O(N^2) due to nested loops
// Space: O(1) for the two-pointer approach



//Optimized Approach - O(n^2 logn + nlogn) - o(n^2 logn) time and O(n) space
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int target = 0;
        sort(nums.begin(), nums.end());
        set<vector<int>> s;
        vector<vector<int>> output;
        for (int i = 0; i < nums.size(); i++){
            int j = i + 1;
            int k = nums.size() - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == target) {
                    s.insert({nums[i], nums[j], nums[k]});
                    j++;
                    k--;
                } else if (sum < target) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        for(auto triplets : s)
            output.push_back(triplets);
        return output;
    }
};
