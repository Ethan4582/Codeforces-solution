
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end()); // Sort the array to group identical elements
        int cnt = 1; 
        int ans = INT_MIN; // Initialize answer to minimum integer value

        if (nums.size() == 1) {
            return nums[0]; // If there's only one element, return it
        }

        for (int i = 1; i < nums.size(); i++) {
            if (nums[i - 1] == nums[i]) {
                cnt++; // Increment count if the current and previous elements are the same
                if (cnt > nums.size() / 2) {
                    ans = nums[i]; // If count exceeds half the size, set answer
                    break; // Exit the loop as we found the majority element
                }
            } else {
                cnt = 1; // Reset count if elements are different
            }
        }
        return ans; // Return the majority element
    }
};

/*
Time Complexity: O(n log n) due to sorting
Space Complexity: O(1) for the count variables used
*/ 
	
	
	class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int, int> count;
        int res = 0, maxCount = 0;

        for (int num : nums) {
            count[num]++;
            if (count[num] > maxCount) {
                res = num;
                maxCount = count[num];
            }
        }
        return res;
    }
};
	
	
	class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums[nums.size() / 2];
    }
};
	
	
Boyer-Moore Majority Voting Algorithm
	
	Dry run for the above example: 
Given :
  arr[]=        1    1    1    1    2    3    5
 votes =0       1    2    3    4    3    2    1
 candidate = -1 1    1    1    1    1    1    1
 candidate = 1  after first traversal
                1    1    1    1    2    3    5
 count =0       1    2    3    4    4    4    4 
 candidate = 1  
 Hence count > 7/2 =3
 So 1 is the majority element.
	
	
	class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int i , res=-1, cnt=0; 
        for(i=0; i < nums.size(); i++){
            // strt cnt and in case some occurance was more thna current 
            if(cnt==0){
                res=nums[i]; 
                cnt=1;
            }else{
                if(nums[i]==res){
                    cnt++;
                }else{
                    cnt--;
                }
            }

        }
        return res;
    }
};
