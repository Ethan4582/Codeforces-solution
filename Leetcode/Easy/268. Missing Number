
// tc- O(n)
// sc- O(1)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n= nums.size();
        int num_sum= (n*(n+1))/2;

        int arr_sum= accumulate(nums.begin(), nums.end(), 0); 

        return num_sum-arr_sum;
    }
};


// Time: O(N)
// Space: O(1)
class Solution {
public:
    int missingNumber(vector<int>& A) {
        return (1 + A.size()) * A.size() / 2 - accumulate(begin(A), end(A), 0);
    }
};


The basic idea is to use XOR operation. We all know that a^b^b =a, which means two xor operations with the same number will eliminate the number and reveal the original number.


// Time: O(N)
// Space: O(1)
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size(), xorVal = 0;
        for (int i = 0; i < n; ++i) xorVal ^= nums[i] ^ (i + 1);
        return xorVal;
    }
}