brute force 

Time Complexity: O(n^2) 
Space Complexity: O(1) 
class Solution {
public:
    int countCompleteDayPairs(vector<int>& hours) {
        int count = 0;
        int n = hours.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if ((hours[i] + hours[j]) % 24 == 0) {
                    ++count;
                }
            }
        }
        return count;
    }
};



---- Optimal appraoch 

class Solution {
 public:
  // Same as 3184. Count Pairs That Form a Complete Day I
  long long countCompleteDayPairs(vector<int>& hours) {
    long ans = 0;
    vector<int> count(24);

    for (const int hour : hours) {
      ans += count[(24 - hour % 24) % 24];
      ++count[hour % 24];//incremen the reminder 
    }

    return ans;
  }
};


class Solution {
public:
    int countCompleteDayPairs(vector<int>& hours) {
        unordered_map<int, int> remainder_count;
        int count = 0;
        for (int hour : hours) {
            int remainder = hour % 24;
            if (remainder == 0) {
                count += remainder_count[0];
            } else {
                count += remainder_count[24 - remainder];
            }
            ++remainder_count[remainder];
        }
        return count;
    }
};



class Solution {
public:
    int countCompleteDayPairs(vector<int>& hr) {
        int n = hr.size();
        unordered_map<int, int> freq;
        
        // Count the frequency of each hour modulo 24
        for (auto it : hr) {
            int rem = ((it % 24) + 24) % 24; // Ensure positive remainder
            freq[rem]++;
        }
        
        int cnt = 0;
        for (int i = 1; i < 12; i++) { 
            cnt += freq[i] * freq[24 - i]; // Count pairs (i, 24-i)
        }
        
        // Special case for remainder 0
        // Choose 2 out of freq[0] (combinatorial pairs)
        if (freq[0] > 1) {
            cnt += (freq[0] * (freq[0] - 1)) / 2; // Combination C(n, 2)
        }
        
        // Special case for remainder 12
        if (freq[12] > 1) {
            cnt += (freq[12] * (freq[12] - 1)) / 2; // Combination C(n, 2)
        }
        
        return cnt;  
    }
};