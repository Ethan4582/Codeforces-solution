
----------------------- optimal -----------------------

tc- O(1)
sc- O(1)

class Solution {
public:
        bool haveConflict(vector<string>& e1, vector<string>& e2) {
        return e1[0] <= e2[1] && e2[0] <= e1[1];
    }
};

---- little bit optimized ---
// Time:
//      MyCalendar: O(1)
//      book: O(logN)
// Space: O(N)
class MyCalendar {
    map<int, int> m;
public:
    MyCalendar() {}
    bool book(int start, int end) {
        if (m.empty()) {
            m[start] = end;
            return true;
        }


      //m.upper_bound(start): This finds the first event that starts after the given start time.
        // The first condition checks if there is a previous event (using prev(it)) and if its end time overlaps with the new event's start time.
        // The second condition checks if the next event (if it exists) starts before the new event ends.

        auto it = m.upper_bound(start);
        if (it != m.begin() && prev(it)->second > start) return false;
        if (it != m.end() && it->first < end) return false;
        m[start] = end;
        return true;
    }
};


//Booking Event 1 (start = 10, end = 20):

// The calendar is empty, so the event is added.
// Map State: {10: 20}
// Return Value: true
// Booking Event 2 (start = 15, end = 25):

// m.upper_bound(15) finds the first event that starts after 15, which points to 10:20.
The previous event ends at 20, which overlaps with the new event's start (15 < 20).
Since there is an overlap, the method returns false.
Map State: {10: 20}
// Return Value: false
// Booking Event 3 (start = 20, end = 30):

// m.upper_bound(20) finds the next event, which is 10:20.
The previous event ends at 20, which does not overlap with the new event's start (20 is not less than 20).
There are no subsequent events that start before 30.
The event is added successfully.
Map State: {10: 20, 20: 30}
Return Value: true


----------------------- brute force -----------------------

tc- O(1)
sc- O(1)

class Solution {
public:
    bool haveConflict(vector<string>& ev1, vector<string>& ev2) {
        // Extract start and end times from event 1
        int t00 = stoi(ev1[0].substr(0, 2)); // Start hour of event 1
        int t01 = stoi(ev1[0].substr(3, 2)); // Start minute of event 1
        int t10 = stoi(ev1[1].substr(0, 2)); // End hour of event 1
        int t11 = stoi(ev1[1].substr(3, 2)); // End minute of event 1

        // Extract start and end times from event 2
        int t20 = stoi(ev2[0].substr(0, 2)); // Start hour of event 2
        int t21 = stoi(ev2[0].substr(3, 2)); // Start minute of event 2
        int t30 = stoi(ev2[1].substr(0, 2)); // End hour of event 2
        int t31 = stoi(ev2[1].substr(3, 2)); // End minute of event 2

        // Convert to minutes
        int start1 = hr_cover(t00) + minute_cover(t01);
        int end1 = hr_cover(t10) + minute_cover(t11);
        int start2 = hr_cover(t20) + minute_cover(t21);
        int end2 = hr_cover(t30) + minute_cover(t31);

        // Check for conflicts
        return (start1 <= end2 && start2 <= end1);
    }

private:
    int minute_cover(int x) {
        return x; // Return minutes as is
    }

    int hr_cover(int x) {
        return x * 60; // Convert hours to minutes
    }
};
