class Solution {
private: 
    void solve(int idx, vector<int>& nums, set<vector<int>>& res) {
        if (idx == nums.size()) {
            res.insert(nums);
            return;
        }
        for (int i = idx; i < nums.size(); i++) {
            swap(nums[i], nums[idx]); 
            solve(idx + 1, nums, res);
            swap(nums[i], nums[idx]); // backtrack 
        }
    }

public:
    void nextPermutation(vector<int>& nums) {
        set<vector<int>> res; 
        solve(0, nums, res);

        auto it = res.find(nums);
        if (it != res.end()) {
            ++it;
            if (it != res.end()) {
                nums = *it;  
            } else {
                nums = *res.begin();  
            }
        }
    }
};
Time: O(n!⋅n) — Generating and storing all permutations.
Space: O(n!⋅n) 


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int idx = -1;
        int n = nums.size();

      
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                idx = i;
                break;
            }
        }

        if (idx == -1) {
            reverse(nums.begin(), nums.end());
            return;
        }

    
        for (int i = n - 1; i > idx; i--) {
            if (nums[i] > nums[idx]) {
                swap(nums[i], nums[idx]);
                break;
            }
        }

        reverse(nums.begin() + idx + 1, nums.end());
    }
};
