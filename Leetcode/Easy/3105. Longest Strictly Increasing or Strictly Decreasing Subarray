class Solution {
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int n=nums.size(); 
        int ans=INT_MIN; 
        // increase 
        for( int i =0 ; i < n ; i++){
            int curr=1;
            for(int j = i+1; j < n; j++ ){
                if(nums[j]> nums[j-1]){
                    curr++;
                }else{
                    break; // if no pattern
                }
            }
              ans=max(ans, curr);
        }

        // decrease 
          for( int i =0 ; i < n ; i++){
            int curr=1;
            for(int j = i+1; j < n; j++ ){
                if(nums[j]< nums[j-1]){
                    curr++;
                }else{
                    break; // if no pattern
                }
            }
              ans=max(ans, curr);
        }

        return ans ;
      
    }
};

class Solution {
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int maxi=1, inc=1, dec=1; 

        for( int i =0 ; i< nums.size()-1; i++){
            if(nums[i+1]> nums[i]){
                inc++; 
                dec=1;
            }else if(nums[i+1]<nums[i]){
                dec++; 
                inc=1;
            }else{
                dec=1; 
                inc=1;
            }
            maxi=max(maxi ,  max(dec, inc));
        }

        return maxi;
    }
};