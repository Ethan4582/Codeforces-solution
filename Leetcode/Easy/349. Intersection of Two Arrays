class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        // Sort both arrays
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());

        vector<int> result; // Vector to store the intersection results
        int i = 0, j = 0; // Initialize two pointers

        // Use two pointers to find the intersection
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] < nums2[j]) {
                i++; // Move pointer in nums1
            } else if (nums1[i] > nums2[j]) {
                j++; // Move pointer in nums2
            } else {
                // If both are equal, add to result and move both pointers
                if (result.empty() || result.back() != nums1[i]) { // Check for uniqueness
                    result.push_back(nums1[i]);
                }
                i++;
                j++;
            }
        }

        return result; // Return the result vector
    }
};

TC- O(nlogn+ mlogm)
SC- O(1)


// Time: O(A + B)
// Space: O(A + B)
class Solution {
public:
    vector<int> intersection(vector<int>& A, vector<int>& B) {
        unordered_set<int> a(begin(A), end(A)), b(begin(B), end(B));
        vector<int> ans;
        for (int n : a) {
            if (b.count(n)) ans.push_back(n);
        }
        return ans;
    }
};