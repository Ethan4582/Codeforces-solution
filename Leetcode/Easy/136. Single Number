
// tc -> O(n)
// sc -> O(n)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int, int> mpp; // Corrected the syntax for unordered_map

        // Count occurrences of each number
        for (auto it : nums) {
            mpp[it]++;
        }

        // Find the number that occurs exactly once
        for (int i = 0; i < nums.size(); i++) {
            if (mpp[nums[i]] == 1) {
                return nums[i];
            }
        }

        return -1; // Return -1 if no single number is found (though this case shouldn't occur)
    }
};

class Solution {
public:
    int singleNumber(vector<int>& nums) { 
       unordered_map<int,int> a;
	   for(auto x: nums)
		   a[x]++;
	   for(auto z:a)
		   if(z.second==1)
			   return z.first;
	   return -1;
    }
};

---  METHOD 2 : USING SORTING (USING CONSTANT SPACE )
TC: O(NlogN)
SC: O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) { 
       sort(nums.begin(),nums.end());
        for(int i=1;i<nums.size();i+=2)
        {
            if(nums[i]!=nums[i-1])
                return nums[i-1];
        }
        return nums[nums.size()-1];
    }
};



----METHOD 3 : USING BITWISE XOR OPERATOR


TC: O(N)
SC: O(1)

class Solution
{
public:
    int singleNumber(vector<int> &nums)
    {
        return accumulate(nums.begin(), nums.end(), 0, bit_xor<int>());
    }
};


class Solution {
public:
    int singleNumber(vector<int>& nums) { 
       int ans=0;
	   for(auto x:nums)
	   ans^=x;
	   return ans;
    }
};


--- Using Maths and sun -----

// tc -> O(n)
// sc -> O(1)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        set<int> uniqueElements;

        // Store unique elements in the set
        for (auto it : nums) {
            uniqueElements.insert(it);
        }

        // Calculate the sum of unique elements multiplied by 2
        int sum_1 = accumulate(uniqueElements.begin(), uniqueElements.end(), 0) * 2;
        
        // Calculate the sum of all elements in the array
        int array_sum = accumulate(nums.begin(), nums.end(), 0);

        // Return the result as per the formula
        return sum_1 - array_sum;
    }
};
