

// Time: O(M + N)
// Space: O(D) where D is the data range of the numbers

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        // Ensure nums1 is the smaller array to optimize space usage
        if (nums1.size() > nums2.size()) {
            swap(nums1, nums2);
        }

        vector<int> ans; // Vector to store the intersection results
        unordered_map<int, int> count; // Map to count occurrences of elements in nums1

        // Count occurrences of each number in nums1
        for (const int num : nums1) {
            count[num]++; // Increment the count for this number
        }

        // Iterate through nums2 to find common elements
        for (const int num : nums2) {
            // Check if the number exists in the count map and has a positive count
            if (count.find(num) != count.end() && count[num] > 0) {
                ans.push_back(num); // Add the number to the result
                count[num]--; // Decrease the count since we've used this number
            }
        }

        return ans; // Return the intersection result
    }
};


class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        
        int i = 0, j = 0;
        vector<int> result;
        
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                result.push_back(nums1[i]);
                i++;
                j++;
            }
        }
        
        return result;
    }
};

TC- O(n log n + m log m)
Space: O(min(m,n))


Follow-up Questions
What if the given array is already sorted? How would you optimize your algorithm?

If the arrays are already sorted, the sorting step can be skipped. This reduces the time complexity to (O(n + m)) for the two-pointer traversal.
What if nums1's size is small compared to nums2's size? Which algorithm is better?

If nums1 is much smaller than nums2, using a hash map to count elements in nums1 and then iterating through nums2 to find common elements can be more efficient. This avoids the overhead of sorting the larger array.
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?

If elements of nums2 are stored on disk, a multi-pass approach might be necessary. First, load chunks of nums2 into memory, compare with nums1 (which can be fully loaded if it is small enough), and keep track of the intersection. This can be done using external sorting or streaming techniques.