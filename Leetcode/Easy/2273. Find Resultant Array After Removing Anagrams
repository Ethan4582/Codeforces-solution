

Tc- O(N + M)
sc- 0(1)

class Solution {
    bool anagram(std::string s, std::string t) {
        std::unordered_map<char, int> mpp; 
        for (char it : s) {
            mpp[it]++;
        }
        for (char it : t) {
            mpp[it]--;
        }
        for (auto it : mpp) {
            if (it.second != 0) return false; // Corrected to use `it.second`
        }
        return true; 
    }
public:
    std::vector<std::string> removeAnagrams(std::vector<std::string>& words) {
        int n = words.size();
        std::vector<std::string> result;

        for (int i = 0; i < n; i++) {
            // If it's the first word or not an anagram of the last added word
            if (i == 0 || !anagram(words[i], words[i - 1])) {
                result.push_back(words[i]); // Add to result
            }
        }
        return result; // Return the result vector
    }
};



// Time: O(NLlogL) where N is the length of A, and L is the max length of A[i]
// Space: O(L)
class Solution {
    bool areAnagrams(string a, string b) {
        sort(begin(a), end(a));
        sort(begin(b), end(b));
        return a == b;
    }
public:
    vector<string> removeAnagrams(vector<string>& A) {
        vector<string> ans;
        for (int i = 0, N = A.size(); i < N; ) {
            ans.push_back(A[i++]);
            while (i < N && areAnagrams(ans.back(), A[i])) ++i;
        }
        return ans;
    }
};



class Solution {
public:
    vector<string> removeAnagrams(vector<string>& w) {
        vector<string> res; 
        int i = 0; 

        while (i < w.size()) {
            string s1 = w[i]; 
            sort(s1.begin(), s1.end()); // Sort the first word

            res.push_back(w[i]); // Push the original word to the result

            int j = i + 1; // Start checking from the next word
            while (j < w.size()) {
                string s2 = w[j]; 
                sort(s2.begin(), s2.end()); // Sort the next word

                if (s1 != s2) {
                    break; // If not an anagram, break the inner loop
                }
                j++; // Move to the next word
            }
            i = j; // Update i to the next word to check
        }
        return res; 
    }
};