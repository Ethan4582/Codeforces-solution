

Time complexity: O(n^2)
Space complexity: O(1)
class Solution {
public:
    bool rotateString(string s, string goal) {
        if (s.length() != goal.length()) {
            return false; // If lengths are different, rotation is not possible
        }

        for (int i = 0; i < goal.length(); i++) {
            bool rotationPossible = true;

            for (int j = 0; j < s.length(); j++) {
                // Use modulo operator to handle rotation
                if (goal[(i + j) % goal.length()] != s[j]) {
                    rotationPossible = false;
                    break;
                }
            }

            if (rotationPossible) {
                return true;
            }
        }

        return false;
    }
};

Tc-0(n); 
Sc-0(n); 

class Solution {
public:
    bool rotateString(string s, string goal) {
        // If the lengths are different, return false
        if (s.size() != goal.size()) {
            return false;
        }

        string concatenated = goal + goal;
        int i = 0;
        int j = 0;
        int n = s.size();
        int m = concatenated.size();

        while (i < m) {
            if (concatenated[i] == s[j]) {
                j++;
                i++;
                if (j == n) {
                    return true;
                }
            } else {
                if (j != 0) {
                    i=i-j+1;
                    j = 0;
                } else {
                    i++;
                }
            }
        }

        return false;
    }
};


Tc- 0(n);
Tc-o(1)
class Solution {
public:
    bool rotateString(string s, string goal) {
        if (s.length() != goal.length()) {
            return false;
        }

        string concatenated = goal + goal;

        return concatenated.find(s) != string::npos;
    }
};


class Solution {
private: 
vector<int> computeLPS(string &pat) {
    int n = pat.length();
    vector<int> lps(n, 0);
    int len = 0, i = 1; 

    while (i < n) {
        if (pat[i] == pat[len]) {
            len++; 
            lps[i++] = len;
        } else if (len > 0) {
            len = lps[len - 1];  
        } else {
            lps[i++] = 0;
        }
    }
    return lps;
}

bool kmpSearch(string &text, string &pat) {
    vector<int> lps = computeLPS(pat); 
    int i = 0, j = 0; 
    int n = text.length(), m = pat.length();

    while (i < n) {
        if (text[i] == pat[j]) {
            i++, j++;
            if (j == m) return true;  // Found match
        } else if (j > 0) {
            j = lps[j - 1];  // Move back using LPS
        } else {
            i++;
        }
    }
    return false;
} 

public:
    bool rotateString(string s, string goal) {
        if (s.length() != goal.length()) return false;
        string curr = goal + goal;
        return kmpSearch(curr, s); 
    }
};

// Time Complexity: O(N) for computing LPS + O(N) for KMP search = O(N)
// Space Complexity: O(N) for LPS array
