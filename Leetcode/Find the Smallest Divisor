
///Brute force 
Time Complexity: O(max(arr[])*N),

class Solution {
public:
    int smallestDivisor(vector<int>& nums, int threshold) {
        int r = *max_element(nums.begin(), nums.end()); // Find the maximum element

        for (int d = 1; d <= r; d++) { // Include r in the loop
            int sum = 0; 
            for (int i = 0; i < nums.size(); i++) {
                sum += (nums[i] + d - 1) / d; // This is equivalent to ceil(nums[i] / d)
            }
            if (sum <= threshold) {
                return d; // Return the smallest divisor that meets the threshold
            }
        }
        return -1; // Return -1 if no valid divisor is found
    }
};

--------------------------------------------------------------------------------

Binary search on answer 

Time Complexity: O(log(max(arr[]))*N),

class Solution {
public:
    int smallestDivisor(vector<int>& nums, int threshold) {
        int l = 1;
        int r = *max_element(nums.begin(), nums.end()); // Use max_element instead of ranges::max

        while (l < r) {
            int mid = (l + r) / 2;
            if (sumByD(nums, mid) <= threshold) {
                r = mid; // Mid is a candidate, search in the left half
            } else {
                l = mid + 1; // Mid is too small, search in the right half
            }
        }

        return l; // Return the smallest divisor
    }

private:
    int sumByD(vector<int>& arr, int div) {
        int sum = 0;
        for (int i = 0; i < arr.size(); i++) {
            sum += (arr[i] + div - 1) / div; // This is equivalent to ceil(arr[i] / div)
        }
        return sum;
    }
};
