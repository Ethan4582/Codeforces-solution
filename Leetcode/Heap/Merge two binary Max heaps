 O(N + M) Time and O(N + M) Space:
class Solution {
    
    void maxHeapify(std::vector<int>& arr, int n, int i) {
        int largest = i; 
        int l = 2 * i + 1; 
        int r = 2 * i + 2;
        
        if (l < n && arr[l] > arr[largest]) {
            largest = l;
        }
        if (r < n && arr[r] > arr[largest]) {
            largest = r;
        } 
        if (largest != i) {
            std::swap(arr[largest], arr[i]); 
            maxHeapify(arr, n, largest);
        }
    }
    
    void buildMaxHeap(std::vector<int>& arr, int n) {
        for (int i = n / 2 - 1; i >= 0; i--) {
            maxHeapify(arr, n, i);
        }
    }

public:
    std::vector<int> mergeHeaps(std::vector<int>& a, std::vector<int>& b, int n, int m) {
        std::vector<int> merged(n + m);
        for (int i = 0; i < n; i++)
            merged[i] = a[i];
        for (int i = 0; i < m; i++)
            merged[n + i] = b[i];
        
        buildMaxHeap(merged, n + m);
        return merged;
    }
};


