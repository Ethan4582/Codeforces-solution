
// Brute force TLE 

class MedianFinder {
public:
    vector<int> arr;

    MedianFinder() {
    }
    
    void addNum(int num) {
        arr.push_back(num); 
        sort(arr.begin(), arr.end());
    }
    
    double findMedian() {
        int size = arr.size();
        if (size % 2 == 1) { 
            return arr[size / 2]; 
        } else { 
            return (arr[size / 2 - 1] + arr[size / 2]) / 2.0;
        }
    }
};

// Time Complexity: O(n log n) for addNum, O(1) for findMedian
// Space Complexity: O(n)


// optmized 
mkae 2 heap max conatin all the smaller than media and all the greate in the minheap if maxheap.size()==min.heap.size that means arrai is even just (mx.top +mn.top)/2   if mx.heap>min.heap ans=mx.top vice versa for  min.heap > mx.heap ans =mn.top



class MedianFinder {
    priority_queue<int> maxheap;  // Max heap for the lower half
    priority_queue<int, vector<int>, greater<int>> minheap;  // Min heap for the upper half

private:
    void callmedian(int elm) {
        // Add the new element to the appropriate heap
        if (maxheap.empty() || elm <= maxheap.top()) {
            maxheap.push(elm);
        } else {
            minheap.push(elm);
        }

        // Balance the heaps to ensure their sizes differ by at most 1
        if (maxheap.size() > minheap.size() + 1) {
            minheap.push(maxheap.top());
            maxheap.pop();
        } else if (minheap.size() > maxheap.size()) {
            maxheap.push(minheap.top());
            minheap.pop();
        }

        // Update the median
        if (maxheap.size() > minheap.size()) {
            median = maxheap.top();
        } else if (minheap.size() > maxheap.size()) {
            median = minheap.top();
        } else {
            median = (maxheap.top() + minheap.top()) / 2.0;
        }
    }

public:
    double median = 0.0;

    MedianFinder() {}

    void addNum(int num) {
        callmedian(num);
    }

    double findMedian() {
        return median;
    }
};



//      MedianFinder: O(1)
//      addNum: O(logN)
//      findMedian: O(1)
// Space: O(N)
class MedianFinder {
    priority_queue<int> sm;
    priority_queue<int, vector<int>, greater<>> gt;
public:
    MedianFinder() {}
    void addNum(int num) {
        if (gt.size() && num > gt.top()) {
            gt.push(num);
            if (gt.size() > sm.size()) {
                sm.push(gt.top());
                gt.pop();
            }
        } else {
            sm.push(num);
            if (sm.size() > gt.size() + 1) {
                gt.push(sm.top());
                sm.pop();
            }
        }
    }
    double findMedian() {
        return sm.size() > gt.size() ? sm.top() : ((double)sm.top() + gt.top()) / 2;
    }
};