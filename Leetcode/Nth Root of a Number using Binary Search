The n th root of   8 root of 19   is  â‡’ 19^1/8

Time Complexity: O(Mlogn), 0(logn) -> for the power exponential fucntion

Space Complexity: O(1) as we are not using any extra space.

// Power exponential method:
long long func(int b, int exp) {
    long long  ans = 1;
    long long base = b;
    while (exp > 0) {
        if (exp % 2) {
            exp--;
            ans = ans * base;
        }
        else {
            exp /= 2;
            base = base * base;
        }
    }
    return ans;
}


// this is will take 0(n) in case for fidning the square 

long long power(int base, int exp) {
    long long result = 1;
    for (int i = 0; i < exp; i++) {
        result *= base;
    }
    return result;
}


int NthRoot(int n, int m) {
    //Use linear search on the answer space:
    for (int i = 1; i <= m; i++) {
        long long val = func(i, n);
        if (val == m * 1ll) return i;
        else if (val > m * 1ll) break;
    }
    return -1;
}



------------------------------------------------------------------------
Optimal Approach(Using Binary Search): 

Time Complexity: O(logN), N = size of the given array.

Space Complexity: O(1)

#include <bits/stdc++.h>
using namespace std;

//return 1, if == m:
//return 0, if < m:
//return 2, if > m:
int func(int mid, int n, int m) {
    long long ans = 1;
    for (int i = 1; i <= n; i++) {
        ans = ans * mid;
        if (ans > m) return 2;
    }
    if (ans == m) return 1;
    return 0;
}


int fun(int mid, int n) {
    ll ans = 1;
    while (n > 0) {
        if (n % 2 == 1) {
            ans = ans * mid;
            n = n - 1;
        } else {
            mid = mid * mid;
            n = n / 2;
        }
    }
    return ans;
}

int NthRoot(int n, int m) {
    //Use Binary search on the answer space:
    int low = 1, high = m;
    while (low <= high) {
        int mid = (low + high) / 2;
        int midN = func(mid, n, m);
// dfiferen funvtio for sqrt  ->  int midN= fucnt(mid,n )
// the resom for 1 , 2 is that if the test case are verhy big we do not need to comput the very big mid value for comaprision 
        if (midN == 1) {
            return mid;
        }
        else if (midN == 0) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}



----------------------------------------------  

Tc-  0(1)
using namespace std;
int findSquareRoot(int x)
{
    // using exponential and logarithmic function to
    // calculate square root of x
    double result = exp(log(x) / 2);
    // floor function to get integer part of the result
    int floorResult = floor(result);
 
    // If the integer square of the floor result is equal to
    // the input x,
    // then x is a perfect square, and floor result is the
    // square root.
    if (floorResult * floorResult == x) {
        return floorResult;
    }
    else { // If not, then x is not a perfect square, and
           // floor result is the floor of the square root.
        return floorResult;
    }
}


