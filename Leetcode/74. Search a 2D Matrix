74. Search a 2D Matrix

brute force 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        bool ans = false;
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[i].size(); j++) {
                if (matrix[i][j] == target) {
                    ans = true;
                    break;
                }
            }
            if (ans) break; 
        }
        return ans; 
    }
};


------------------------> optmize 


// Time: O(log(MN))
// Space: O(1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& A, int target) {
        int M = A.size(), N = A[0].size(), L = 0, R = M * N - 1;
        while (L <= R) {
            int mid = (L + R) / 2, x = mid / N, y = mid % N;
            if (A[x][y] == target) return true;
            if (A[x][y] < target) L = mid + 1;
            else R = mid - 1;
        }
        return false;
    }
};



class Solution {
public:
    bool binarySearch(vector<int>& nums,int target){
        int n=nums.size();
        int s=0,e=n-1;
        while(s<=e){
            int m=(s+e)/2;
            if(nums[m]==target) return true;
            else if(nums[m]<target) s=m+1;
            else e=m-1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();
        int s=0,e=n-1;
        while(s<=e){
            int mid=s +(e-s)/2;
            if(matrix[mid][0]<=target && target<=matrix[mid][m-1]){
                return binarySearch(matrix[mid],target);
            }
            else if(matrix[mid][0]<target){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return false;
    }
};




class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.empty() || matrix[0].empty()) return false;

        int m = matrix.size();       // Number of rows
        int n = matrix[0].size();    // Number of columns
        int left = 0;
        int right = m * n - 1;       // Total number of elements - 1

        while (left <= right) {
            int mid = left + (right - left) / 2; // Avoid potential overflow
            int midValue = matrix[mid / n][mid % n]; // Convert 1D index to 2D

            if (midValue == target) {
                return true; // Target found
            } else if (midValue < target) {
                left = mid + 1; // Search in the right half
            } else {
                right = mid - 1; // Search in the left half
            }
        }

        return false; // Target not found
    }
};


