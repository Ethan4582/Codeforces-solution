74. Search a 2D Matrix

brute force 


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(); // number of rows
        if (n == 0) return false; // Check if the matrix is empty
        int m = matrix[0].size(); // number of columns

        for (int i = 0; i < n; i++) { // Start from 0
            for (int j = 0; j < m; j++) { // Start from 0
                if (matrix[i][j] == target) {
                    return true; // Return true immediately if found
                }
            }
        }

        return false; // Return false if not found
    }
};


------------------------> optmize 


// Time: O(log(MN))
// Space: O(1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& A, int target) {
        int M = A.size(), N = A[0].size(), L = 0, R = M * N - 1;
        while (L <= R) {
            int mid = (L + R) / 2, x = mid / N, y = mid % N;
            if (A[x][y] == target) return true;
            if (A[x][y] < target) L = mid + 1;
            else R = mid - 1;
        }
        return false;
    }
};



 Tc= O(N*logM)
Space Complexity: O(1) 

class Solution {
public:
    // Binary search function to search in a 1D array
    bool bs(const vector<int>& row, int target) {
        int n = row.size(); // size of the array
        int l = 0, h = n - 1;
        while (l <= h) { // Change condition to l <= h
            int mid = (l + h) / 2;
            if (row[mid] == target) return true; // Compare with row[mid]
            if (row[mid] < target) l = mid + 1;
            else h = mid - 1;
        }
        return false;
    }

    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(); // number of rows
        if (n == 0) return false; // Check if the matrix is empty
        int m = matrix[0].size(); // number of columns

        for (int i = 0; i < n; i++) { // Start from 0
            // Check if the target is within the range of the row
            if (matrix[i][0] <= target && target <= matrix[i][m - 1]) {
                return bs(matrix[i], target); // Corrected spelling of target
            }
        }

        return false; // Return false if not found
    }
};


Most optmianl 
Time Complexity: O(log(NxM)), 
Space Complexity: O(1)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.empty() || matrix[0].empty()) return false;

        int m = matrix.size();       // Number of rows
        int n = matrix[0].size();    // Number of columns
        int left = 0;
        int right = m * n - 1;       // Total number of elements - 1

        while (left <= right) {
            int mid = left + (right - left) / 2; // Avoid potential overflow
            int midValue = matrix[mid / n][mid % n]; // Convert 1D index to 2D

            if (midValue == target) {
                return true; // Target found
            } else if (midValue < target) {
                left = mid + 1; // Search in the right half
            } else {
                right = mid - 1; // Search in the left half
            }
        }

        return false; // Target not found
    }
};


--------------------------------------------------------------------------------------------------------

// Time: O(M + N)
// Space: O(1)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& A, int target) {
        if (A.empty() || A[0].empty()) return false;
        int M = A.size(), N = A[0].size(), i = 0, j = N - 1;
        while (i < M && j >= 0) {
            if (A[i][j] == target) return true;
            if (A[i][j] < target) ++i;
            else --j;
        }
        return false;
    }
};

