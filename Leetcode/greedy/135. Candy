class Solution {
public:
    int candy(vector<int>& rat) {
              int n = rat.size();
        if (n == 0) return 0; 

        vector<int> l(n, 1); 
        vector<int> r(n, 1); 

        for (int i = 1; i < n; i++) {
            if (rat[i] > rat[i - 1]) {
                l[i] = l[i - 1] + 1; 
            }
        }

   
        for (int i = n - 2; i >= 0; i--) {
            if (rat[i] > rat[i + 1]) {
                r[i] = r[i + 1] + 1; 
            }
        }

        int ans = 0;
     
        for (int i = 0; i < n; i++) {
            ans += max(l[i], r[i]);
        }

        return ans;
    
    }
};


class Solution {
public:
    int candy(vector<int>& rat) {
              int n = rat.size();
        if (n == 0) return 0; 

        vector<int> l(n, 1); 
        vector<int> r(n, 1); 

        for (int i = 1; i < n; i++) {
            if (rat[i] > rat[i - 1]) {
                l[i] = l[i - 1] + 1; 
            }
        }
        int ans = l[n - 1];

     for (int i = n - 2; i >= 0; i--) {
            if (rat[i] > rat[i + 1]) {
                r[i] = r[i + 1] + 1; 
            }
            ans += max(l[i], r[i]); 
        }

      
        return ans;
    
    }
};


class Solution {
public:
    int candy(vector<int>& rat) {
        int n= rat.size(); 
        int ttl=n; 
        int i =1 ; 
        // we alread min 1 to all of them 
        while( i <n){
            if(rat[i]==rat[i-1]){
                i++; 
                continue;
            }

            int top=0; 
            while( i < n  && rat[i]> rat[i-1]){
                 top++; 
                ttl+=top;
                i++; 
            }
            if( i ==n){
                return ttl;
            }

            int bot=0; 
            while( i < n  && rat[i]<rat[i-1]){
                bot++; 
                ttl+=bot;
                i++; 
            }

            ttl-=min(top,bot); // need to removr min to add the max at the top 

        }
        return ttl;
        
    }
};


tc- 0(n); 
sc-0(1)