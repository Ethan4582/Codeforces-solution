Merge Overlapping Subintervals

https://leetcode.com/problems/merge-intervals/

/------------------------ Optimal 

Time Complexity: O(N*logN) + O(N), 
Space Complexity: O(N)

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end()); // Sort the intervals based on the start time
        vector<vector<int>> ans;
        int n = intervals.size();
        
        for (int i = 0; i < n; i++) {
            // If the current interval does not overlap with the last interval
            if (ans.empty() || intervals[i][0] > ans.back()[1]) {
                ans.push_back(intervals[i]);
            } else { // If the current interval overlaps with the last interval
                ans.back()[1] = max(ans.back()[1], intervals[i][1]);
            }
        }
        
        return ans;
    }
};




------------------------->Brute Force Approach

just sort then just overlap it 

Time Complexity: O(N*logN) + O(2*N), where N = the size of the given array.
Space Complexity: O(N), 

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end()); // Sort the intervals based on the start time
        vector<vector<int>> ans;
        int n = intervals.size();
        
        for (int i = 0; i < n; ) {
            int start = intervals[i][0];
            int end = intervals[i][1];
            
            // Check if there are overlapping intervals
            while (i + 1 < n && end >= intervals[i + 1][0]) {
                end = max(end, intervals[i + 1][1]);
                i++;
            }
            
            ans.push_back({start, end}); // Add the merged interval to the answer
            i++;
        }
        
        return ans;
    }
};






