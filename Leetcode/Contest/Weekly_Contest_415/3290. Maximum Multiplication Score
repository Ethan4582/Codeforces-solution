

class Solution {
public:
    long long maxScore(vector<int>& a, vector<int>& b) {
          vector<long long> t(4, INT_MIN);
    for (long long n : b) {
        t[3] = max(t[3], t[2] + n * a[3]);
        t[2] = max(t[2], t[1] + n * a[2]);
        t[1] = max(t[1], t[0] + n * a[1]);
        t[0] = max(t[0], n * a[0]);
    }
    return t[3];
    }
};


TC- O(N)
SC- O(1)


4. Why Reverse Order?
The reason the stages are updated in reverse order is that each stage depends on the previous one. For example, t[3] depends on t[2], so if we updated t[2] before updating t[3], we might lose the information from the previous iteration that we need for t[3]. By updating in reverse, we ensure that each state is based on the correct, previous state.



long long helper(vector<int> &a, vector<int>& b, int i1, int i2){
    if(i1==a.size()) return 0;
    if(i2>=b.size()) return INT_MIN;

    long long int take=(long long)a[i1]*(long long)b[i2]+ helper(a,b,i1+1,i2+1);
    long long int not_take=helper(a,b,i1,i2+1);

    return max(take,not_take);
}

long long maxScore(vector<int>& a, vector<int>& b){
    return helper(a,b,0,0);
}
