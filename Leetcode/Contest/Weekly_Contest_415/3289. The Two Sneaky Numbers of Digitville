class Solution {
public:
    vector<int> getSneakyNumbers(vector<int>& nums) {
        unordered_map<int, int> mpp; 
        vector<int> ans;
        
        for (int num : nums) {
            mpp[num]++;  // Increment the frequency of the number
        }
        
        for (const auto& pair : mpp) {
            if (pair.second == 2) {
                ans.push_back(pair.first);
            }
        }
        
        return ans;
    }
};



Approach
XOR All Numbers: The first two loops XOR all elements in v and the numbers from 0 to n-1, resulting in xr = t1 ^ t2, where t1 and t2 are the two repeated numbers.

Find Rightmost Set Bit: The variable right = xr & ~(xr - 1) identifies the rightmost bit that differs between t1 and t2.

Divide Numbers Based on Set Bit:
Numbers in v and 0 to n-1 are divided into two groups based on the bit found in step 2. One group contains numbers where that bit is set, and the other group contains numbers where the bit is not set.

XOR in Each Group: By XORing numbers in these two groups, all numbers except t1 and t2 will cancel out, leaving you with the two repeated numbers.

Complexity
Time Complexity: O(N)
Space Complexity: O(1)

class Solution {
public:
    vector<int> getSneakyNumbers(vector<int>& v) {

        int xr = 0;
        int m = v.size();
        int n = v.size()-2;

        for(int i=0; i<m; i++) {
            xr = xr^v[i];
        }

        for(int i=0; i<n; i++) {
            xr = xr^i;
        }

        int right = xr&~(xr-1);

        int t1 = 0;
        int t2 = 0;

        for(int i=0; i<m; i++) {
            if(v[i]&right) {
                t1 = t1^v[i];
            }
            else t2 = t2^v[i];
        }
        
        for(int i=0; i<n; i++) {
            if(i&right) {
                t1 = t1^i;
            }
            else t2 = t2^i;
        }

        return {t1, t2};
    }
};

