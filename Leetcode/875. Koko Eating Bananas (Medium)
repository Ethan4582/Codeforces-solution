Naive Approach(Brute-force): 


Time Complexity: O(max(a[]) * N), where max(a[]) is the maximum element in the array and N = size of the array
Which make TLE 

Space Complexity: O(1)

#include <bits/stdc++.h>
using namespace std;

int findMax(vector<int> &v) {
    int maxi = INT_MIN;
    int n = v.size();
    //find the maximum:
    for (int i = 0; i < n; i++) {
        maxi = max(maxi, v[i]);
    }
    return maxi;
}

int calculateTotalHours(vector<int> &v, int hourly) {
    int totalH = 0;
    int n = v.size();
    //find total hours:
    for (int i = 0; i < n; i++) {
        totalH += ceil((double)(v[i]) / (double)(hourly));
    }
    return totalH;
}

int minimumRateToEatBananas(vector<int> v, int h) {
    //Find the maximum number:
    int maxi = findMax(v);

    //Find the minimum value of k:
    for (int i = 1; i <= maxi; i++) {
        int reqTime = calculateTotalHours(v, i);
        if (reqTime <= h) {
            return i;
        }
    }

    //dummy return statement
    return maxi;
}





------------------------------------------------------------------------------------------------------------

Optimal Approach(Using Binary Search): 

We can replace the linear seArch with  binary seaarch for which we need to know the range and we knnow the answer always lies between 1 to maxi elment of the array 


Time Complexity: O(N * log(max(a[]))), where max(a[]) is the maximum element in the array and N = size of the array.
Reason: We are applying Binary search for the range [1, max(a[])], and for every value of ‘mid’, we are traversing the entire array inside the function named calculateTotalHours().

Space Complexity: O(1)



#include <bits/stdc++.h>
using namespace std;

int findMax(vector<int> &v) {
    int maxi = INT_MIN;
    int n = v.size();
    //find the maximum:
    for (int i = 0; i < n; i++) {
        maxi = max(maxi, v[i]);
    }
    return maxi;
}

int calculateTotalHours(vector<int> &v, int hourly) {
    int totalH = 0;
    int n = v.size();
    //find total hours:
    for (int i = 0; i < n; i++) {
        totalH += ceil((double)(v[i]) / (double)(hourly));
    }
    return totalH;
}

int minimumRateToEatBananas(vector<int> v, int h) {
    int low = 1, high = findMax(v);

    //apply binary search:
    while (low <= high) {
        int mid = (low + high) / 2;
        int totalH = calculateTotalHours(v, mid);
        if (totalH <= h) {
            high = mid - 1; // this is the possible answer as we are find the nimium number it possible  
        }
        else {
            low = mid + 1;
        }
    }
    return low;
}


---------------------------------------------------------------------
class Solution {
 public:
  int minEatingSpeed(vector<int>& piles, int h) {
    int l = 1;
    int r = ranges::max(piles);

    while (l < r) {
      const int m = (l + r) / 2;
      if (eatHours(piles, m) <= h)
        r = m;
      else
        l = m + 1;
    }

    return l;
  }

 private:
  int eatHours(const vector<int>& piles, int m) {
    return accumulate(piles.begin(), piles.end(), 0,
                      [&](int subtotal, int pile) {
      return subtotal + (pile - 1) / m + 1;  // ceil(pile / m)
    });
  }
};


---------------------------------------------------------------------------------




class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        // Initialize the lower bound of the search range
        int low = 1;
        // Initialize the upper bound of the search range to the maximum bananas in a pile
        int high = 0;
        int n = piles.size();
        for (int i = 0; i < n; i++) {
            high = max(high, piles[i]);
        }

        // Result variable to store the minimum eating speed
        int res = high;

        // Binary search for the minimum feasible eating speed
        while (low <= high) {
            // Middle point of the current search range
            int k = low + (high - low) / 2;
            long int hours = 0;

            // Calculate total hours needed to eat all bananas with speed k
            for (int i = 0; i < n; i++) {
                hours += ceil((double)piles[i] / k);
            }

            // If Koko can eat all bananas within h hours with speed k
            if (hours <= h) {
                // Update result and search for a smaller feasible speed
                res = min(res, k);
                high = k - 1;
            } else {
                // Otherwise, search for a larger speed
                low = k + 1;
            }
        }

        // Return the minimum feasible eating speed
        return res;
    }
};


















