
//puttting the smaller sourrand by max elment is optimal solution 

https://github.com/lzl124631x/LeetCode/tree/master/leetcode/1968


sc=> 0(n> creation of new array 
class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        // Sort the array
        sort(nums.begin(), nums.end());
        vector<int> rearranged(nums.size());
        
        // Fill the rearranged array with elements from both ends of the sorted array
        int left = 0, right = nums.size() - 1;
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                rearranged[i] = nums[left++];
            } else {
                rearranged[i] = nums[right--];
            }
        }
        
        return rearranged;
    }
};


// Time: O(NlogN)
// Space: O(1)
class Solution {

public:
    vector<int> rearrangeArray(vector<int>& A) {
        sort(begin(A), end(A));
        for (int i = 0; i + 1 < A.size(); i += 2) {
            swap(A[i], A[i + 1]);
        }
        return A;
    }
};
