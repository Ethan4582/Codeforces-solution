// Time: O(N)
// Space: O(N)
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        stack<int> st;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') st.push(i);
            else if (s[i] == ')') {
                if (st.empty()) s[i] = ' ';
                else st.pop();
            }
        }
        while (st.size()) {
            s[st.top()] = ' ';
            st.pop();
        }
        s.erase(remove(begin(s), end(s), ' '), end(s));
        return s;
    }
};


class Solution {
public:
    string minRemoveToMakeValid(string s) {
        string s;
        int open = 0;

        for (char c : s) {
            if (c == '(') {
                open++;
                s += c;
            } else if (c == ')') {
                if (open > 0) {
                    open--;
                    s += c;
                }
            } else {
                s += c;
            }
        }
        string fin;
        int close = 0;
        for (int i = s.size() - 1; i >= 0; i--) {
            if (s[i] == ')') {
                close++;
                fin += ')';
            } else if (s[i] == '(') {
                if (close > 0) {
                    close--;
                    fin += '(';
                }
            } else {
                fin += s[i];
            }
        }

        reverse(fin.begin(), fin.end());
        return fin;
    }
};






class Solution {
public:
    string minRemoveToMakeValid(string s) {
    int open = 0;

    
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                open++;
            } else if (s[i] == ')') {
                if (open == 0) {
                    s[i] = '*';  
                } else {
                    open--;
                }
            }
        }

       
        for (int i = s.size() - 1; i >= 0 && open > 0; --i) {
            if (s[i] == '(') {
                s[i] = '*';
                open--;
            }
        }

        s.erase(remove(s.begin(), s.end(), '*'), s.end());
        return s;
    }
};