
function countSetBits(n):
    // Initialize a counter for set bits
    count = 0
    // If the number is negative, convert it to its 2's complement representation
    // Loop until the number becomes 0
    while n > 0:
        // Check if the least significant bit (LSB) is 1
        if (n & 1) == 1:
            count = count + 1
        // Right shift the number to process the next bit
        n = n >> 1
    return count


-------------------------------Brute force 

    class Solution {
public:
    bool canSortArray(vector<int>& nums) {
        int n = nums.size();
        vector<int> values = nums;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (values[j] <= values[j + 1]) {
                    // No swap needed
                    continue;
                } else {
                    if (__builtin_popcount(nums[j]) ==
                        __builtin_popcount(nums[j + 1])) {
                        // Swap the elements
                        swap(values[j], values[j + 1]);
                    } else {
                        return false;
                    }
                }
            }
        }
        return true;
    }
};

---------- otpmizes solution 


Its population counts are as follows:

 2 1 1 1 1 3 1 1 3 3
Therefore it should be split to ranges like this:

3 | 16 8 4 2 | 7 | 1 256 | 12 14

So range minimums and maximums would look as follows:

3..3 | 2..16 | 7..7 | 1..256 | 12..14 |

if we see the min of each segemnet should be samller the prvious segmnet max if not they is not way it can be sway the setbit is differnet 


class Solution {
public:
    bool canSortArray(vector<int>& nums) {

        //set of first elme
        int currbit= __builtin_popcount(nums[0]);
        //difine intail range
        int mxsegm=nums[0];
        int minseg=nums[0];

        int mxPrevsegm=INT_MIN ; // we  need to compare to first elm

        for( int i =0 ; i<nums.size(); i++ ){
            if(__builtin_popcount(nums[i])==currbit){
                // if the setbit same as segement we udate the range
                mxsegm=max(mxsegm,nums[i]);
                    minseg=min(minseg,nums[i]);
            }else{
                // if it belong to different segment and also follw the propety of be in raange sprted 

                if(minseg< mxPrevsegm){
                    return false;// if follws the sorted  range cond but fail swap condition
                } 

                // we update the prev max we entered nee segment
                 mxPrevsegm= mxsegm;

                //start a  new segment
                 mxsegm=nums[i];
                 minseg=nums[i];
                 currbit= __builtin_popcount(nums[i]);

            }
        }

        if(minseg< mxPrevsegm){
                    return false;// if follws the sorted  range cond but fail swap condition
                } 
return true;
        
    }
};



