We convert num to a string and then:

If negative: sort descending, excluding the sign.
If positive: sort ascending
Find first non-zero number (e.g. 000237)
Swap it with the first number (e.g. 200037)

class Solution {
 public:
  long long smallestNumber(long long num) {
    string s = to_string(abs(num));
    ranges::sort(s, [&](int a, int b) { return num < 0 ? a > b : a < b; });
    if (num > 0)
      swap(s[0], s[s.find_first_not_of('0')]);
    return stoll(s) * (num < 0 ? -1 : 1);
  }
};



this can alo be done with 
 if (s[0] == '0') {
                for (int i = 1; i < s.size(); ++i) {
                    if (s[i] != '0') {
                        swap(s[0], s[i]);
                        break;
                    }
                }
            }


// Time: O(KlogK) where K is the number of digits in `n`
// Space: O(K)
class Solution {
public:
    long long smallestNumber(long long n) {
        if (n == 0) return 0;
        int sign = n >= 0 ? 1 : -1, zero = 0;
        n = abs(n);
        vector<int> d;
        while (n) {
            if (n % 10 == 0) ++zero;
            else d.push_back(n % 10);
            n /= 10;
        }
        if (sign == 1) {
            sort(begin(d), end(d));
            long ans = d[0];
            while (zero--) ans = 10 * ans;
            for (int i = 1; i < d.size(); ++i) {
                ans = 10 * ans + d[i];
            }
            return ans;
        } else {
            sort(begin(d), end(d), greater<>());
            long ans = 0;
            for (int i = 0; i < d.size(); ++i) {
                ans = 10 * ans + d[i];
            }
            while (zero--) ans = 10 * ans;
            return -ans;
        }
    }
}