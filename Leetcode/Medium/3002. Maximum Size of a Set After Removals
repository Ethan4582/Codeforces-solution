
Approach
Calculate the number of unique elements in nums1 and nums2 by storing their elements in sets s1 and s2.
Also calculate total unique elements in both arrays in set s.
The answer is minimum of:
a. size of s
b. sum of number of unique elements provided by both arrays, which is min(n/2, s1.size) + min(n/2, s2.size)

TC-O(n)
SC-O(n)
class Solution {
public:
    int maximumSetSize(vector<int>& nums1, vector<int>& nums2) {
        set<int> s1, s2, s;
        int n = nums1.size();
        for (int x : nums1) {
            s1.insert(x);
            s.insert(x);
        }
        for (int x : nums2) {
            s2.insert(x);
            s.insert(x);
        }
        int ans = min(min(n/2, (int)s1.size()) + min(n/2, (int)s2.size()),(int) s.size());
         
        return ans;
    }
};


class Solution {
 public:
  int maximumSetSize(vector<int>& nums1, vector<int>& nums2) {
    const unordered_set<int> set1{nums1.begin(), nums1.end()};
    const unordered_set<int> set2{nums2.begin(), nums2.end()};
    unordered_set<int> common;

    for (const int num1 : set1)
      if (set2.contains(num1))
        common.insert(num1);

    const int n = nums1.size();
    const int n1 = set1.size();
    const int n2 = set2.size();
    const int nc = common.size();
    const int maxUniqueNums1 = min(n1 - nc, n / 2);
    const int maxUniqueNums2 = min(n2 - nc, n / 2);
    return min(n, maxUniqueNums1 + maxUniqueNums2 + nc);
  }
};