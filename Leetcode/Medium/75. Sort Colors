//T.C : O(n+n)
//S.C : O(1)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n = nums.size();
        
        int count_0 = 0;
        int count_1 = 0;
        int count_2 = 0;
        
        for(int &num : nums) {
            if(num == 0)
                count_0++;
            else if(num == 1)
                count_1++;
            else
                count_2++;
        }
        
        for(int i = 0; i<n; i++) {
            if(count_0 > 0) {
                nums[i] = 0;
                count_0--;
            } else if(count_1 > 0) {
                nums[i] = 1;
                count_1--;
            } else if(count_2 > 0) {
                nums[i] = 2;
                count_2--;
            }
        }
    }
};


-------------------------------

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n= nums.size(); 
        int i =0 , j =0 , k = n-1; 
        while(j <=k){
            if(nums[j]==1){
                j++;
            }else if(nums[j]==2){
                swap(nums[j], nums[k]);
                k--;
            }else{
                swap(nums[i], nums[j]);
                j++;
                i++;
            }
        }
        
    }
};


-------------------------Counting sort -----------------
class Solution {
public:
    void sortColors(vector<int>& nums) {
        vector<int> count(3 , 0); 
        for (int n : nums) count[n]++;
        int i =0; 
        for(int j =0 ; j<3; j++){
            while(count[j]--){
                nums[i++]=j;
            }
        }
    }
};