// Time: O(NWlogW)
// Space: O(NW)
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& A) {
        unordered_map<string, vector<string>> m;
        for (auto &s : A) {
            auto key = s;
            sort(begin(key), end(key));
            m[key].push_back(s);
        }
        vector<vector<string>> ans;
        for (auto &[key, strs] : m) ans.push_back(strs);
        return ans;
    }
};
	
	// Time: O(NWlogW)
// Space: O(N)
	
	
	class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& s) {
        unordered_map<string , vector<string>> st; 

        for(const auto& it : s){
           vector<int> cnt(26, 0); 
           string s = it;
           for(char k : s){
            cnt[k-'a']++;
           } 

           string  key = to_string(cnt[0]); 
           for(int i =1; i <26; i++){
            key+=',' + to_string(cnt[i]);
           }
           st[key].push_back(s);
        }

        vector<vector<string >> ans;

        for (auto & it: st ){
            ans.push_back(it.second);
        }
        return ans;
    }
};