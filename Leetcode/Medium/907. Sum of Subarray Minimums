
brute force

class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                long minVal = *min_element(arr.begin() + i, arr.begin() + j + 1);
                ans += minVal;
            }
        }
        return ans % ((int)pow(10, 9) + 7);
    }
};


// optmized solution 




so contibution of k elmnt in the sum is = num if subarr*  k elment 



class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        long long ans = 0;
        vector<int> left(n, -1), right(n, n);
        stack<int> st;
        long long mod = (int)1e9 + 7;

        // Find the next smaller element index from the current index
        for (int i = 0; i < n; i++) {
            while (!st.empty() && arr[st.top()] >= arr[i]) {
                //we are kkep putting thelemnt in ht stack until that in not while loop are definall samller elment that are pushed in stack  jsut before conditon the last elment which is the samllest we update in the right 
                right[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }

        st = stack<int>();

        // Find the previous smaller element index from the current index
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && arr[st.top()] > arr[i]) {
                left[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }

        for (int i = 0; i < n; i++) {
            long long l = left[i] + 1;
            long long r = right[i];
            ans = (ans + ((r - i) * (i - l + 1) * arr[i]) % mod) % mod;
        }

        return ans;
    }
};
