class Solution {
private: 
bool isprime(int n){
    if(n<=1){
        return false;
    }
    for(int i =2; i*i<=n; i++){
        if(n%i==0){
            return false;
        }
    }
    return true;
}
public:
    int countPrimeSetBits(int left, int right) {
         int count = 0;
        for (unsigned int i = left; i <= right; i++){
            int setbits = __builtin_popcount(i);
            if (isprime(setbits)) count++;
        }
        return count;
    }
};


// most optmized wait to check prime 


class Solution {
private: 
bool isprime(int n){
    // if num is 2 or 3 
    if(n==2 || n==3){
        return true;
    }
        if (n <= 1 || n % 2 == 0 || n % 3 == 0)
        return false;
         for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
    }
    return true;
}
public:
    int countPrimeSetBits(int left, int right) {
         int count = 0;
        for (unsigned int i = left; i <= right; i++){
            int setbits = __builtin_popcount(i);
            if (isprime(setbits)) count++;
        }
        return count;
    }
};


