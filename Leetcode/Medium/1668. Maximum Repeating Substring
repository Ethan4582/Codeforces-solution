class Solution {
public:
    int maxRepeating(string l, string t) {
        string s = t; 
        int cnt = 0;
        
        // Check if 'l' contains 's' (which starts as 't') 
        // and keep appending 't' to 's' until it no longer is contained in 'l'
        while (l.find(s) != string::npos) { 
            cnt++; 
            s += t; // Append 't' to 's'
        }
        
        return cnt; // Return the count of how many times 't' can be repeated in 'l'
    }
};

// Time Complexity: O(n * m) where n is the length of l and m is the length of t
// Space Complexity: O(m) for the string s that grows with each iteration



class Solution {
private:

    vector<int> computeLPS(string &pat) {
        int m = pat.size();
        vector<int> lps(m, 0);
        int len = 0, i = 1;

        while (i < m) {
            if (pat[i] == pat[len]) {
                lps[i++] = ++len;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i++] = 0;
                }
            }
        }
        return lps;
    }

 
    vector<int> kmpSearch(string &t, string &pt) {
        int n = t.size(), m = pt.size();
        vector<int> lps = computeLPS(pt);
        vector<int> idx;
        int i = 0, j = 0;

        while (i < n) {
            if (t[i] == pt[j]) {
                i++, j++;
            }
            if (j == m) {
                idx.push_back(i - j);
                j = lps[j - 1];  
            } else if (i < n && t[i] != pt[j]) { 
                j ? j = lps[j - 1] : i++;
            }
        }
        return idx;
    }

public:
    int maxRepeating(string a, string b) {
        int cnt = 0;
        string r = b;
        
        
        while (!kmpSearch(a, r).empty()) {
            cnt++;
            r += b;
        }
        
        return cnt;
    }
};


// Time Complexity: O(n log(N)) where n is the length of l and m is the length of t
// Space Complexity: O(n+m) for the string s that grows with each iteration