
this work  but out rang for stoi to convert 

class Solution {
public:
    string multiply(string num1, string num2) {
        long n = stoi(num1); 
        long m =stoi(num2); 
        long long  k = n*m;
        return to_string(k);a
    }
};




class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0" || num2 == "0") {
            return "0";
        }

        long long n = 0;
        for (char c : num1) {
            n = n * 10 + (c - '0');
        }

        long long m = 0;
        for (char c : num2) {
            m = m * 10 + (c - '0');
        }

        long long k = n * m;

        string ans = "";
        while (k != 0) {
            ans = to_string(k % 10) + ans; // append the last digit to the beginning of the string
            k /= 10;
        }

        return ans;
    }
};



class Solution {
public:
    string multiply(string num1, string num2) {
        // Get the lengths of both input strings
        int l1 = num1.size(), l2 = num2.size();
        
        // If either of the numbers is "0", the result will be "0"
        if (num1 == "0" || num2 == "0") {
            return "0";
        }

        // Vector to store the result, with a size of l1 + l2 (maximum possible digits)
        vector<int> result(l1 + l2, 0);

        // Traverse both strings from the last digit to the first
        for (int i = l1 - 1; i >= 0; i--) {
            for (int j = l2 - 1; j >= 0; j--) {
                // Multiply the digits at num1[i] and num2[j]
                int mul = (num1[i] - '0') * (num2[j] - '0');
                
                // Add the multiplication result and carry to the corresponding position in result
                int sum = mul + result[i + j + 1];

                // Store the last digit of the sum in result[i + j + 1]
                result[i + j + 1] = sum % 10;
                
                // Carry over to the next position (i + j)
                result[i + j] += sum / 10;
            }
        }

        // Convert the result vector into a string
        string ans = "";

        // Skip leading zeroes and append digits to the result string
        for (int i = 0; i < result.size(); ++i) {
            if (!(ans.empty() && result[i] == 0)) {  // Skip leading zeroes
                ans.push_back(result[i] + '0');
            }
        }
        
        // If result is empty, return "0"; otherwise return the computed result
        return ans.empty() ? "0" : ans;
    }
};
