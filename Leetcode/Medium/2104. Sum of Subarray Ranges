
--------Brute force

class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        long long ans = 0;
        int n = nums.size(); 
        for (int i = 0; i < n; i++) {
            int maxVal = INT_MIN, minVal = INT_MAX;
            for (int j = i; j < n; j++) {
                maxVal = max(maxVal, nums[j]);
               
                minVal = min(minVal, nums[j]);

                ans += maxVal - minVal;
            }
        }
        return ans;
    }
};


class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        long long ans = 0;
        int n = nums.size(); 
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int maxVal = *max_element(nums.begin() + i, nums.begin() + j + 1);
                int minVal = *min_element(nums.begin() + i, nums.begin() + j + 1);
                ans += maxVal - minVal;
            }
        }
        return ans;
    }
};




optmized  ->   just find the sum of subarray  maximum   -  sum of subarray  maximum  ;



subarray max is just oposie in sught ofthe  subaarray minimums

class Solution {
private:
    long long submax(vector<int>& nums) {
        int n = nums.size();
        long long ans = 0;
        long long mod = 1e9 + 7; // Define the modulus
        vector<int> left(n, -1) ,right(n, n);
        stack<int> st;

        // Find the next greater element index from the current index
        for (int i = 0; i < n; i++) {
            while (!st.empty() && nums[st.top()] <= nums[i]) {
                right[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }

        st = stack<int>();

        // Find the previous greater element index from the current index
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && nums[st.top()] < nums[i]) {
                left[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }

        // Calculate the sum of subarray maximums
        for (int i = 0; i < n; i++) {
            long long l = left[i] + 1; // Left boundary
            long long r = right[i];    // Right boundary
            ans = (ans + ((r - i) * (i - l + 1) * nums[i])); // Corrected calculation
        }

        return ans; // Return the result
    }

    long long submin(vector<int>& nums) {
        int n = nums.size();
        long long ans = 0;
        long long mod = 1e9 + 7; // Define the modulus
        vector<int> left(n, -1), right(n, n);
        stack<int> st;

        // Find the next smaller element index from the current index
        for (int i = 0; i < n; i++) {
            while (!st.empty() && nums[st.top()] >= nums[i]) {
                right[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }

        st = stack<int>();

        // Find the previous smaller element index from the current index
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && nums[st.top()] > nums[i]) {
                left[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }

        // Calculate the sum of subarray minimums
        for (int i = 0; i < n; i++) {
            long long l = left[i] + 1; // Left boundary
            long long r = right[i];    // Right boundary
            ans = (ans + ((r - i) * (i - l + 1) * nums[i]) ); // Corrected calculation
        }

        return ans; // Return the result
    }

public:
    long long subArrayRanges(vector<int>& nums) {
        return submax(nums) - submin(nums);
    }
};