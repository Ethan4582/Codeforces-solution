class Solution {
public:
    int lengthAfterTransformations(string s, int t) {
        unordered_map<char, long long> freq;
        for (char c : s) freq[c]++;

        const int MOD = 1e9 + 7;

        while (t--) {
            unordered_map<char, long long> newFreq;
            for (auto &[ch, count] : freq) {
                if (ch == 'z') {
                    newFreq['a'] = (newFreq['a'] + count) % MOD;
                    newFreq['b'] = (newFreq['b'] + count) % MOD;
                } else {
                    newFreq[ch + 1] = (newFreq[ch + 1] + count) % MOD;
                }
            }
            freq = newFreq;
        }

        long long total = 0;
        for (auto &[ch, count] : freq) {
            total = (total + count) % MOD;
        }
        return total;
    }
};



class Solution {
public:
    int lengthAfterTransformations(string s, int t) {
        const int MOD = 1e9 + 7;
        vector<long long> freq(26, 0);

        for (char c : s) {
            freq[c - 'a']++;
        }

        while (t--) {
            vector<long long> next(26, 0);
            for (int i = 0; i < 26; ++i) {
                if (i == 25) {
                    next[0] = (next[0] + freq[25]) % MOD;
                    next[1] = (next[1] + freq[25]) % MOD;
                } else {
                    next[i + 1] = (next[i + 1] + freq[i]) % MOD;
                }
            }
            freq = next; 
        }

        long long total = 0;
        for (int i = 0; i < 26; ++i) {
            total = (total + freq[i]) % MOD;
        }
        return total;
    }
};
