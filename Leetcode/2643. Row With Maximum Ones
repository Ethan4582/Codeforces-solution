------------------------------> Brute force 

Time Complexity: O(n X m)


class Solution {
public:
    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
        int maxCount = 0; // To keep track of the maximum number of ones found
        int rowIndex = -1; // To keep track of the row index with maximum ones

        // Iterate through each row of the matrix
        for (int i = 0; i < mat.size(); i++) {
            int count = 0; // Count of 1s in the current row
            
            // Count the number of 1s in the current row
            for (int j = 0; j < mat[i].size(); j++) {
                if (mat[i][j] == 1) {
                    count++;
                }
            }

            // Update maxCount and rowIndex if the current row has more 1s
            if (count > maxCount) {
                maxCount = count;
                rowIndex = i;
            }
        }

        // Return the index of the row and the count of 1s in that row
        return {rowIndex, maxCount};
    }
};

-----------------------------------> Optimal ----> binary search 
Time Complexity: O(n X logm), where n = given row number, m = given column number.


class Solution {
public:
    // Function to find the first index of 1 using binary search
    int lowerBound(const vector<int>& row, int size, int target) {
        int left = 0, right = size;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (row[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left; // This returns the index of the first occurrence of 'target'
    }

    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
        int cnt_max = 0;
        int index = -1;
        int n = mat.size();
        int m = mat[0].size(); // Assuming mat is not empty and has at least one row

        for (int i = 0; i < n; i++) {
            // Get the number of 1's:
            int cnt_ones = m - lowerBound(mat[i], m, 1);
            if (cnt_ones > cnt_max) {
                cnt_max = cnt_ones;
                index = i;
            }
        }
        return {index, cnt_max}; // Return the index and maximum count of 1's
    }
};


---------------------------------------------------------------


class Solution {
public:
int noOfOnes(vector<int>&row,int n){
    if(n==1)return row[0]==1;
    int low =0;
    int high = n-1;
    sort(row.begin(),row.end());

    while(low<=high){
        int mid = low+(high-low)/2;

        if(row[mid]==1){
            high = mid-1;
        }else{
            low=mid+1;
        }
    }
    return (n-1)-low+1;
}
vector<int> rowAndMaximumOnes(vector<vector<int>>& matrix) {
   int max1=0;
   int indexOfMaxRow=0;
   int n= matrix.size();
       int m = matrix[0].size();
   for(int i=0;i<n;i++){
       int OneINThisRow = noOfOnes(matrix[i],m);
       if(OneINThisRow>max1){
           max1=OneINThisRow;
           indexOfMaxRow = i;
       }
   }
   return {indexOfMaxRow,max1};
    }
};

