
// Time: O(NlogN)
// Space: O(1)

class Solution {
public:
    vector<int> minSubsequence(vector<int>& nums) {
        // Sort the array in descending order
        sort(nums.begin(), nums.end(), greater<int>());
        
        vector<int> ans;
        int total_sum = accumulate(nums.begin(), nums.end(), 0); // Total sum of the array
        int subsequence_sum = 0; // Sum of the selected subsequence
        
        // Iterate through the sorted array
        for (int num : nums) {
            ans.push_back(num); // Add the current number to the subsequence
            subsequence_sum += num; // Update the subsequence sum
            
            // Check if the subsequence sum is greater than the sum of the remaining elements
            if (subsequence_sum > (total_sum - subsequence_sum)) {
                break; // We found the required subsequence
            }
        }
        
        return ans; // Return the resulting subsequence
    }
};
