->>>>>>>>>>  brute force approach 

tc- O(N^2),
sc- 0 (1)


class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int n= nums.size();
        int cnt = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (nums[i] > 2 * nums[j]) cnt++;
        }
    }
    return cnt;
}
 
};



----------------> Optmise way 

implment merge sort 

Time Complexity: O(2N*logN)
Space Complexity: O(N) // aswe are distoring the arry 

-> just impment  the merge sort and the just make function then count  the pair
-> we divide the arry in 2 part then recursive it wil divide itself agin and then coun the coundtion always divide itself into 2 array check for the condition


class Solution {
public:

 void merge(vector<int> &arr, int low, int mid, int high) {
        vector<int> temp;
        int left = low;
        int right = mid + 1;

        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.push_back(arr[left]);
                left++;
            } else {
                temp.push_back(arr[right]);
                right++;
            }
        }

        while (left <= mid) {
            temp.push_back(arr[left]);
            left++;
        }

        while (right <= high) {
            temp.push_back(arr[right]);
            right++;
        }

        for (int i = low; i <= high; i++) {
            arr[i] = temp[i - low];
        }
    }

    int countPairs(vector<int> &arr, int low, int mid, int high) {
    int right = mid + 1;
    int cnt = 0;
    for (int i = low; i <= mid; i++) {
        while (right <= high && arr[i] > 2LL * static_cast<long long>(arr[right])) right++;
        //counting the pair 
        cnt += (right - (mid + 1));
    }
    return cnt;
}


    int mergeSort(vector<int> &arr, int low, int high) {
        int cnt = 0;
        if (low >= high) return cnt;
        int mid = (low + high) / 2;
        cnt += mergeSort(arr, low, mid);
        cnt += mergeSort(arr, mid + 1, high);
        // so we merge the arry then we count for the condtion  
        cnt += countPairs(arr, low, mid, high);
        merge(arr, low, mid, high);
        return cnt;
    }

    int reversePairs(vector<int>& nums) {
        int n= nums.size(); 
        return mergeSort( nums ,  0 , n-1 );
        
    }
};
