
https://www.geeksforgeeks.org/problems/delete-all-occurrences-of-a-given-key-in-a-doubly-linked-list/1


class Solution {
public:
    // Function to delete a specified node from the linked list
    void deleteNode(Node** head_ref, Node* nodeToDelete) {
        // If the linked list is empty or the node to be deleted is NULL, return
        if (*head_ref == nullptr || nodeToDelete == nullptr) return;

        // If the node to be deleted is the head node, update the head pointer
        if (*head_ref == nodeToDelete) {
            *head_ref = nodeToDelete->next; // Move head to the next node
        }

        // If the node to be deleted is not the last node, update the next pointer of the previous node
        if (nodeToDelete->next != nullptr) {
            nodeToDelete->next->prev = nodeToDelete->prev;
        }

        // If the node to be deleted is not the first node, update the previous pointer of the next node
        if (nodeToDelete->prev != nullptr) {
            nodeToDelete->prev->next = nodeToDelete->next;
        }

        // Free the memory occupied by the deleted node
        delete nodeToDelete; // Use delete instead of free for C++ objects
    }

    // Function to delete all occurrences of a specific element from the linked list
    void deleteAllOccurrences(Node** head_ref, int value) {
        // If the linked list is empty, return
        if (*head_ref == nullptr) return;

        Node* current = *head_ref; // Start from the head of the list
        Node* nextNode; // Pointer to hold the next node

        // Traverse the list until the end
        while (current != nullptr) {
            // If a node with the specified value is found
            if (current->data == value) {
                nextNode = current->next; // Save the next node
                deleteNode(head_ref, current); // Delete the current node
                current = nextNode; // Move to the next node
            } else {
                current = current->next; // Move to the next node
            }
        }
    }
};