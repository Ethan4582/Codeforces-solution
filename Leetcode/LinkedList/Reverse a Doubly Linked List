https://www.geeksforgeeks.org/problems/reverse-a-doubly-linked-list/1

bruteforce  -> 2 pass solution 
class Solution {
public:
  // Function to reverse a doubly linked list
  DLLNode* reverseDLL(DLLNode* head) {
    if (head == nullptr || head->next == nullptr) {
      return head; // Empty list or single element
    }

    stack<int> st;
    DLLNode* temp = head;

    // Push data from head to tail into stack (Time: O(N))
    while (temp != nullptr) {
      st.push(temp->data);
      temp = temp->next;
    }

    temp = head;

    // Pop data from stack and update the list (Time: O(N))
    while (temp != nullptr) {
      temp->data = st.top();
      st.pop();
      temp = temp->next;
    }

    return head;
  }
};

// Reverse the link in one pass  swap the link

O(n) Time and O(1) Space


class Solution {
public:
    // Function to reverse a doubly linked list
    DLLNode* reverseDLL(DLLNode* head) {
        // If the list is empty or has only one node,
        // return the head as is
        if (head == nullptr || head->next == nullptr)
            return head;

        DLLNode* prevNode = nullptr; // Corrected type from Node to DLLNode
        DLLNode* currNode = head;     // Corrected type from Node to DLLNode

        // Traverse the list and reverse the links
        while (currNode != nullptr) {
            // Swap the next and prev pointers
            prevNode = currNode->prev;
            currNode->prev = currNode->next;
            currNode->next = prevNode;

            // Move to the next node in the original list 
            // (which is now previous due to reversal)
            currNode = currNode->prev;
        }

        // The final node in the original list
        // becomes the new head after reversal
        return prevNode->prev; // This is correct as it points to the new head
    }
};