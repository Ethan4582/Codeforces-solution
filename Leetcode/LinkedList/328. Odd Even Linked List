
Tc- 0(n);  
sc-0(1)

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        // Create two dummy nodes for odd and even indexed lists
        ListNode* oddDummy = new ListNode(0); 
        ListNode* evenDummy = new ListNode(0); 
        
        ListNode* oddTail = oddDummy; // Pointer to build the odd list
        ListNode* evenTail = evenDummy; // Pointer to build the even list
        
        ListNode* curr = head; // Start traversal from the head
        int index = 1; // Index counter to track odd/even positions

        // Traverse the original list
        while (curr != nullptr) {
            if (index % 2 != 0) { // If index is odd
                oddTail->next = curr; // Add to odd list
                oddTail = oddTail->next; // Move odd tail forward
            } else { // If index is even
                evenTail->next = curr; // Add to even list
                evenTail = evenTail->next; // Move even tail forward
            }
            curr = curr->next; // Move to the next node
            index++; // Increment index
        }

        // Connect the end of the odd list to the head of the even list
        oddTail->next = evenDummy->next; 

        // End the even list
        evenTail->next = nullptr; 

        // Return the head of the odd list (skipping the dummy node)
        return oddDummy->next; 
    }
};


Much Cleaner code 
Time Complexity : O(n) - We traverse the linked list only once.

Auxiliary Space : O(1) - No extra space required

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head || !head->next || !head->next->next) return head;
        
        ListNode *odd = head;
        ListNode *even = head->next;
        ListNode *even_start = head->next;
        
        while(odd->next && even->next){
            odd->next = even->next; //Connect all odds
            even->next = odd->next->next;  //Connect all evens
            odd = odd->next;
            even = even->next;
        }
        odd->next = even_start;   //Place the first even node after the last odd node.
        return head; 
    }
};
