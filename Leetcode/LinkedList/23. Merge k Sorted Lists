
My Appraoch 

Time Complexity: O(3N) -> N1+N2+N3  so it can become  k(N) not exactly 
SC- 0(1)
class Solution {
private:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode dummy; // Dummy node to simplify merging
        ListNode* tail = &dummy;
        dummy.next = nullptr; // Initialize the next pointer of the dummy node

        while (l1 && l2) {
            if (l1->val < l2->val) {
                tail->next = l1;
                l1 = l1->next;
            } else {
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        // Attach remaining elements from non-empty list
        tail->next = l1 ? l1 : l2;
        return dummy.next;
    }

public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) return nullptr;

        ListNode* newhead = lists[0]; 
        for (int i = 1; i < lists.size(); i++) { // Start from index 1
            newhead = mergeTwoLists(newhead, lists[i]); // Merge the current head with the next list
        }

        return newhead;
    }
};



------------------Min Heap 

we use   priority_queue  to impement  min heap whcih store all the elmenent in sorted order of the first elment wise PQ<int , ListNode*> then we can just take out from  the Pq and move the temp to curr list then we do  for other elmement in PQ 

// Time: O(NlogK)
// Space: O(K)


class Compare {
public:
    bool operator()(ListNode* a, ListNode* b) {
        return a->val > b->val; // Min-heap based on node value
    }
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        // Handle the case of an empty list
        if (lists.empty()) return nullptr;

        // Create a dummy node to simplify list merging
        ListNode dummy;
        ListNode* tail = &dummy;

        // Min-heap to store the heads of the lists
        priority_queue<ListNode*, vector<ListNode*>, Compare> minHeap;

        // Push the head of each non-empty list into the priority queue
        for (ListNode* head : lists) {
            if (head) {
                minHeap.push(head);
            }
        }

        // While there are nodes in the priority queue
        while (!minHeap.empty()) {
            // Get the smallest node
            ListNode* minNode = minHeap.top();
            minHeap.pop();

            // Attach the smallest node to the merged list
            tail->next = minNode;
            tail = tail->next;

            // If there's a next node in the same list, push it into the queue
            if (minNode->next) {
                minHeap.push(minNode->next);
            }
        }

        // Return the merged list, skipping the dummy node
        return dummy.next;
    }
};