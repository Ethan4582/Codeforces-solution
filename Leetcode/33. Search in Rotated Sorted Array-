Search Element in a Rotated Sorted Array  - 1   [ it only have unique elment 


First oproach is  linear search 
Tc- 0(N)


------------- Rotated array means   a= 1 2 3 4 5  x=4   a_roated= 4 5 1 2 3

Optimal Approach(Using Binary Search): 

------------ Here we need the check the side is sorted or not  and this while searching on the  side 

Time Complexity: O(logN), N = size of the given array.
Reason: We are using binary search to search the target.

Space Complexity: O(1)


------------- As solution we always we give the mid pint 


int search(vector<int>& arr, int n, int k) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;

        //if mid points the target
        if (arr[mid] == k) return mid;

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                //element exists:
                high = mid - 1;
            }
            else {
                //element does not exist:
                low = mid + 1;
            }
        }
        else { //if right part is sorted:
            if (arr[mid] <= k && k <= arr[high]) {
                //element exists:
                low = mid + 1;
            }
            else {
                //element does not exist:
                high = mid - 1;
            }
        }
    }
    return -1;
}




Same thing but more cleaner  way 


class Solution {
public:
    int search(vector<int>& A, int target) {
        int N = A.size(), L = 0, R = N - 1;
        while (L <= R) {
            int M = (L + R) / 2;
            if (A[M] == target) return M;
            if (A[M] > A[R]) {
                if (target >= A[L] && target < A[M]) R = M - 1;
                else L = M + 1;
            } else {
                if (target > A[M] && target <= A[R]) L = M + 1;
                else R = M - 1;
            }
        }
        return -1;
    }
};




more cleaner way we have just combine this case 

// Time: O(logN)
// Space: O(1)
class Solution {
public:
    int search(vector<int>& A, int target) {
        int L = 0, R = A.size() - 1;
        while (L <= R) {
            int M = (L + R) / 2;
            if (A[M] == target) return M;
            if ((A[M] > A[R] && (target > A[M] || target < A[L]))
               || (A[M] <= A[R] && (target > A[M] && target <= A[R]))) L = M + 1;
            else R = M - 1;
        }
        return -1;
    }
};


---------------------------------------------------------------------------------------------------------------------------------------

/////////////////  Search Element in Rotated Sorted Array II //////////////////////

sorted in ascending order (may contain duplicate values) 
We do not need to tell index just tell it  target is prsent in it 

simple linear search 

Time Complexity: O(N), 

Space Complexity: O(1)

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n = nums.size( ); 
        bool ans =false; 
        for( int i =0 ; i <n ; i++){
            if (nums[i]== target ){
                return true ; 
                break ;
            }
        }
        return ans; 
    }
};



example  -  we can applyy the same concept of sorted arr -1  
arr = 3 , 1 ,2, 3,3 3, 3,  low =3  mid=3 , high =3; 

to check sorted we check and compare the low mid and high  so we cannot identify   the  sorted order 


------------ so in case of arr[ low] = arr[ mid] = arr[high ]  we shrink down the search space 
we move low forward and high backward  do the same checking if the sorted or no do the amse we do in the sorted array 1 


// Time: O(logN) on average, O(N) in the worst case   if lot of duppliacte then we can  shrink till half  of the size of thearray fo canbe 0(n/2)
// Space: O(1)
class Solution {
public:
    bool search(vector<int>& A, int target) {
        int L = 0, R = A.size() - 1;
        while (L <= R) {
            int M = (L + R) / 2;
            if (A[M] == target) return true;
            if (A[M] == A[R]) --R;
            else if (A[M] < A[R]) {
                if (A[M] < target && target <= A[R]) L = M + 1;
                else R = M - 1;
            } else {
                if (A[L] <= target && target < A[M]) R = M - 1;
                else L = M + 1;
            }
        }
        return false;
    }
};


class Solution {
public:
    bool search(vector<int>& arr, int k) {
        int n= nums.size
        int n = arr.size(); // size of the array.
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;

        //if mid points the target
        if (arr[mid] == k) return true;

        //Edge case:
        if (arr[low] == arr[mid] && arr[mid] == arr[high]) {
            low = low + 1;
            high = high - 1;
            continue;
        }

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                //element exists:
                high = mid - 1;
            }
            else {
                //element does not exist:
                low = mid + 1;
            }
        }
        else { //if right part is sorted:
            if (arr[mid] <= k && k <= arr[high]) {
                //element exists:
                low = mid + 1;
            }
            else {
                //element does not exist:
                high = mid - 1;
            }
        }
    }
    return false;
    }
};





























