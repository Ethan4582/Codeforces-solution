array can have muiltiple peal elment 

------------------------Brute Force Approach

Time Complexity: O(N), 

Space Complexity: O(1) 


class Solution {
public:
    int findPeakElement(vector<int>& arr) {
        int n = arr.size(); //Size of array.

    for (int i = 0; i < n; i++) {
        //Checking for the peak:
        if ((i == 0 || arr[i - 1] < arr[i])
                && (i == n - 1 || arr[i] > arr[i + 1])) {
            return i;
        }
    }
    // Dummy return statement
    return -1;
    }
};



--------------------------- Optimal 
     Optimal Approach(Using Binary Search): 

arr[i]  is the mid  

If arr[i] > arr[i-1]: we are in the left half. mid is left of the peak 
If arr[i] > arr[i+1]: we are in the right half. mid is right of the peak 



// Time: O(logN)
// Space: O(1)
class Solution {
public:
    int findPeakElement(vector<int>& arr) {
         int n = arr.size(); //Size of array.

    // Edge cases:
    if (n == 1) return 0;
    if (arr[0] > arr[1]) return 0;
    if (arr[n - 1] > arr[n - 2]) return n - 1;

    int low = 1, high = n - 2;
    while (low <= high) {
        int mid = (low + high) / 2;

        //If arr[mid] is the peak:
        if (arr[mid - 1] < arr[mid] && arr[mid] > arr[mid + 1])
            return mid;

        // If we are in the left:
        if (arr[mid] > arr[mid - 1]) low = mid + 1;

        // If we are in the right:
        // Or, arr[mid] is a common point:
        else high = mid - 1;
    }
    // Dummy return statement
    return -1;
    }
};



// Time: O(logN)
// Space: O(1)
class Solution {
public:
    int findPeakElement(vector<int>& A) {
        int L = 0, R = A.size() - 1;
        while (L < R) {
            int M = (L + R) / 2;
            if (A[M] > A[M + 1]) R = M;
            else L = M + 1;
        }
        return L;
    }
};



class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        int low =0;
        int high = nums.size()-1;
        while(low < high){
            int mid = (low+high)/2;
             if((mid==n-1 ||  nums[mid]<nums[mid+1]) && (mid==0 ||nums[mid] > nums[mid-1]))
                low = mid +1;
            else{
                high = mid;
            }
        }
        return low;
    }
};















