
------------------------------------------------------------------------------------------------------------------------------------

a[ r] [c]  is th eat the center of the matrix with endges as the boundry metion in thequestion 

we can elimate  this by subatracting  the prfix sum of souranding   from the  prefix of the matrix  for a[r][c]

thr prfix of the matirx of the entier thing and we are subatraing it from it  

class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int rows = mat.size();
        int cols = mat[0].size();
        vector<vector<int>> answer(rows, vector<int>(cols, 0));

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int sum = 0;
                for (int r = i - k; r <= i + k; r++) {
                    if (r < 0 || r >= rows) continue;
                    for (int c = j - k; c <= j + k; c++) {
                        if (c < 0 || c >= cols) continue;
                        sum += mat[r][c];
                    }
                }
                answer[i][j] = sum;
            }
        }
        return answer;
    }
};


--------------------------------------------------------------------------------------------------------------------------------




// Time: O(MN)
// Space: O(1)
class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& A, int K) {
        int M = A.size(), N = A[0].size();
        for (int i = 0; i < M; ++i) {
            int sum = 0;
            for (int j = 0; j < N; ++j) {
                sum += A[i][j];
                A[i][j] = sum + (i - 1 >= 0 ? A[i - 1][j] : 0);
            }
        }
        vector<vector<int>> ans(M, vector<int>(N));
        for (int i = 0; i < M; ++i) {
            for (int j = 0; j < N; ++j) {
                int minr = max(-1, i - K - 1), maxr = min(M - 1, i + K), minc = max(-1, j - K - 1), maxc = min(N - 1, j + K);
                int a = A[maxr][maxc], b = minc == -1 ? 0 : A[maxr][minc], c = minr == -1 ? 0 : A[minr][maxc], d = minr == -1 || minc == -1 ? 0 : A[minr][minc];
                ans[i][j] = a - b - c + d;
            }
        }
        return ans;
    }
};


Time: O(mn)

Space:  O(mn)


class Solution {
 public:
  vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
    const int m = mat.size();
    const int n = mat[0].size();
    vector<vector<int>> ans(m, vector<int>(n));
    vector<vector<int>> prefix(m + 1, vector<int>(n + 1));

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        prefix[i + 1][j + 1] =
            mat[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        const int r1 = max(0, i - k) + 1;
        const int c1 = max(0, j - k) + 1;
        const int r2 = min(m - 1, i + k) + 1;
        const int c2 = min(n - 1, j + k) + 1;
        ans[i][j] = prefix[r2][c2] - prefix[r2][c1 - 1] - prefix[r1 - 1][c2] +
                    prefix[r1 - 1][c1 - 1];
      }

    return ans;
  }
};
-------------------------------------------------------------------------------------------------------------------------------------------------


Differenet techinqe 
Block sum formula on integral image.
Block-sum of red rectangle = block-sum of D - block-sum of B - block-sum of C + block-sum of A    [ strraight formula 



https://leetcode.com/problems/matrix-block-sum/solutions/482730/python-js-go-c-o-m-n-integral-image-dp-w-explanation







class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int K) {
        int R = mat.size(); // Number of rows
        int C = mat[0].size(); // Number of columns
        
        // Step 1: Build the integral image with padding
        vector<vector<int>> m(R + 1, vector<int>(C + 1, 0));
        
        for (int r = 1; r <= R; r++) {
            for (int c = 1; c <= C; c++) {
                m[r][c] = mat[r - 1][c - 1] + m[r - 1][c] + m[r][c - 1] - m[r - 1][c - 1];
            }
        }
        
        // Step 2: Compute block sum using the integral image
        vector<vector<int>> answer(R, vector<int>(C, 0));
        
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                // Determine the boundaries of the block
                int min_r = max(0, i - K);
                int max_r = min(R, i + K + 1);
                int min_c = max(0, j - K);
                int max_c = min(C, j + K + 1);
                
                // Calculate the block sum using the integral image
                answer[i][j] = m[max_r][max_c] - m[min_r][max_c] - m[max_r][min_c] + m[min_r][min_c];
            }
        }
        
        return answer; // Return the computed block sums
    }
};








