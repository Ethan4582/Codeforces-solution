
class Solution {
private: 
vector<vector<int>> build(int V, vector<vector<int>>& edges) {
    vector<vector<int>> adj(V); 
    
    for(auto it: edges){
        int u = it[0];
        int v= it[1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    return adj;
}

void bfs(int i, vector<vector<int>>& adj,
         vector<bool>& vis, vector<int>& comp){
             int n=adj.size();;
              queue<int> q;
        q.push(i);
        vis[i] = true;

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            comp.push_back(node);

            for (int neighbor : adj[node]) {
                if (!vis[neighbor]) {
                    vis[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
             
         }
  public:
    vector<vector<int>> getComponents(int V, vector<vector<int>>& e) {
    vector<vector<int>> adj = build(V, e);

    vector<bool> vis(V, false);

    
    vector<vector<int>> ans;

    for(int i =0 ; i < V; i++){

        if(!vis[i]){
            
            vector<int> comp; 
            bfs(i  , adj , vis , comp );
            
            ans.push_back(comp);
        }
    }
    return ans;
    }
};