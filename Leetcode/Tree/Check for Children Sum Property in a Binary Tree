https://www.geeksforgeeks.org/problems/children-sum-parent/1


if the current node == sum of left +right children
if it does not follow  we increas the node +1 any number of times


https://leetcode.com/discuss/interview-question/1683371/google-india-on-site-new-grad


Edgae case when we come from root make the children sub property their migh be case even after satifying all the property their can be root much greater  value as reduction is much big 
We have to make sure their is not a shortage 

while going down increase the children value to max value which is the root itself making sure their is not a shortage of the value 
while coming up the value increas the root thus overall changing the root value 


// Time Complexity: O(N)
// Space Complexity: O(H) where H is the height of the tree for recursion stack


class Solution {
    // Function to ensure whether the tree can become the sum property child
    void changeTree(Node* root) {
        if (root == NULL) return;

        int child = 0;
        // Sum the values of the left and right children
        if (root->left) {
            child += root->left->data;
        }
        if (root->right) {
            child += root->right->data;
        }

        if (child) { // If there are children, update root's value
            root->data = child;
        } else { // If child sum is less, adjust the children to match root's value
            if (root->left) {
                root->left->data = root->data;
            } 
            if (root->right) {
                root->right->data = root->data;
            }
        }

        // Recur for left and right children
        changeTree(root->left);
        changeTree(root->right);

        // Update the root's value after processing children
        int total = 0;
        if (root->left) total += root->left->data;
        if (root->right) total += root->right->data;

        if (root->left || root->right) {
            root->data = total; // Update root value to the sum of its children's values
        }
    }

public:
    int isSumProperty(Node* root) {
        // Initialize the tree to ensure it satisfies the sum property
        changeTree(root);

        // Check if the updated tree satisfies the sum property
        if (root == NULL) return 1; // An empty tree satisfies the property
        int leftSum = (root->left) ? root->left->data : 0;
        int rightSum = (root->right) ? root->right->data : 0;

        // Check if the root's data equals the sum of its children's data
        return (root->data == leftSum + rightSum) ? 1 : 0;
    }
};




class Solution {
public:
    int isSumProperty(Node *root) {
        // If root is NULL or it's a leaf node, return true (1)
        if (root == nullptr || (root->left == nullptr && root->right == nullptr))
            return 1;

        int sum = 0;

        // If left child is present, add its data to sum
        if (root->left != nullptr)
            sum += root->left->data;

        // If right child is present, add its data to sum
        if (root->right != nullptr)
            sum += root->right->data;

        // Check if the current node's data equals the sum of its children's data
        // and recursively check the left and right subtrees
        return (root->data == sum) &&
               isSumProperty(root->left) &&
               isSumProperty(root->right);
    }
};

// Time Complexity: O(N)
// Space Complexity: O(H) where H is the height of the tree for recursion stack



class Solution {
public:
    int isSumProperty(Node *root) {
          // If root is NULL then return true
    if (root == nullptr)
        return 1;
        
    queue<Node*> q;
    q.push(root);
    
    while (!q.empty()) {
        Node* curr = q.front();
        q.pop();
        // if this node is a leaf node, 
        // then continue
        if (curr->left == nullptr &&
            curr->right == nullptr)
            continue;
        
        int sum = 0;
        // If left child is not present then 0
        // is used as data of left child
        if (curr->left != nullptr) {
            sum += curr->left->data;
        }
        // If right child is not present then 0
        // is used as data of right child
        if (curr->right != nullptr) {
            sum += curr->right->data;
        }
        
        // if current node does not
        // follow the property, then
        // return 0.
        if (curr->data != sum) 
            return 0;
            
        // Push the left child node
        if (curr->left != nullptr)
            q.push(curr->left);
            
        // Push the right child node
        if (curr->right != nullptr)
            q.push(curr->right);
    }
        
    return 1;
    }
};

// Time Complexity: O(N)
// Space Complexity: O(H) where H is the height of the tree for recursion stack
