

// Tc- 0(N);
// Sc-0(h)*2
class BSTIterator {
private:
    stack<TreeNode*> st; 
    bool reverse; 
     // reverse -> true-> before => we access the end pointer bigger num 
    //  reverse -> false-> next => we access the start pointer samller num 

    void pushAll(TreeNode* node) {
        while (node != NULL) {
            st.push(node); 
            if (reverse) {
                node = node->right; // Push all greater numbers
            } else {
                node = node->left; // Push all smaller numbers
            }
        }
    }

public:
    BSTIterator(TreeNode* root, bool isRev) {
        reverse = isRev;
        pushAll(root);
    }

    bool hasNext() {
        return !st.empty(); // Check if the stack is empty
    }

    int next() {
        TreeNode* temp = st.top();  
        st.pop(); 
        if (!reverse) {
            pushAll(temp->right); 
        } else {
            pushAll(temp->left); 
        }
        return temp->val;
    }
};

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if (!root) return false;
        // here left is asling for the next  elment 

        BSTIterator left(root, false); // Iterator for smaller numbers and get next elmenent 
        BSTIterator right(root, true); // Iterator for greater numbers and get before element like moving pointer backward  
         // we have created and object this is treated differnt mean the they we apply on differnt stack opertionon the same stack 
        int i = left.next();
        int j = right.next();

        while (i < j) {
            int sum = i + j;
            if (sum == k) {
                return true; // Found the target sum
            } else if (sum < k) {
                if (left.hasNext()) {
                    i = left.next(); // Move to next smaller number
                } else {
                    break; // No more elements
                }
            } else {
                if (right.hasNext()) {
                    j = right.next(); // Move to next greater number
                } else {
                    break; // No more elements
                }
            }
        }
        return false; // No pair found
    }
};

// Time Complexity: O(N)
// Space Complexity: O(h) where h is the height of the tree