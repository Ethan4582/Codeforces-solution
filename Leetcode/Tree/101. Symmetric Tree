


class Solution {
    bool check(TreeNode* left, TreeNode* right) {
        // If both nodes are NULL, they are symmetric
        if (left == NULL && right == NULL) {
            return true;
        }
        // If one of the nodes is NULL, they are not symmetric
        if (left == NULL || right == NULL) {
            return false;
        }
        
        // Check the values and recursively check the subtrees
        if (left->val != right->val) {
            return false;
        }

        // Corrected the recursive calls to check the opposite subtrees
        return check(left->left, right->right) && check(left->right, right->left);
    }

public:
    bool isSymmetric(TreeNode* root) {
        return root == NULL || check(root->left, root->right);
    }
};

/*
Time Complexity: O(N) - Each node is processed once.
Space Complexity: O(H) - Space for the recursion stack, where H is the height of the tree.
*/ 
