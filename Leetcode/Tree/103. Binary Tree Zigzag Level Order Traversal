

//cleaner impmnetion 

// Time: O(N)
// Space: O(N)
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if (!root) return {};
        queue<TreeNode*> q;
        q.push(root);
        bool flag = true;
        vector<vector<int>> ans;
        while (q.size()) {
            int cnt = q.size();
            vector<int> lv;
            while (cnt--) {
                root = q.front();
                q.pop();
                lv.push_back(root->val);
                if (root->left) q.push(root->left);
                if (root->right) q.push(root->right);
            }
            if (!flag) reverse(begin(lv), end(lv));
            ans.push_back(lv);
            flag = !flag;
        }
        return ans;
    }
};

My code 

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
    
        vector<vector<int> > ans ; 
        if(root==nullptr) return ans ;

          queue<TreeNode* > q; 
          q.push(root);
              bool flag =1 ;// tho change the zig-zag inseration
              while(!q.empty()){
                int n = q.size(); 
                vector<int> row(n);// to storwe prev qued element
                for( int i=0 ; i <n ; i++){
                    TreeNode* node= q.front(); 
                    q.pop(); 

                    // to insert in zig -zag order 
                    int idx = (flag)? i : (n-1-i);
                    row[idx]= node->val;
                    if(node->left){
                        q.push(node->left);
                    }
                    if(node->right){
                        q.push(node->right);
                    }
                }
                //toggle the flag
                flag=!flag;
                ans.push_back(row);

              }
              return ans; 
      
    }
};



class Solution {
public:
    void dfs(TreeNode* node, int level, vector<vector<int>>& ans) {
        if (!node) return; // Base case
        if (ans.size() <= level) ans.push_back({}); // Create a new level
        if (level % 2 == 0) 
            ans[level].push_back(node->val); // Left to right
        else 
            ans[level].insert(ans[level].begin(), node->val); // Right to left
        dfs(node->left, level + 1, ans); // Traverse left
        dfs(node->right, level + 1, ans); // Traverse right
    }

    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        dfs(root, 0, ans); // Start DFS
        return ans;
    }
};

// Time: O(N)
// Space: O(N)




