
- Longest path between any 2 root
- path does not need to  pass through  tree

Brute force -

for each node we callate the left + right the we just check the max that left+right while traversing throgh each node 

// Simple DFS  

class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if (root == nullptr) return 0;

        int diameter = 0;
        computeDiameter(root, diameter);
        return diameter;
    }

private:
    int height(TreeNode* node) {
        if (node == nullptr) return 0;
        return 1 + max(height(node->left), height(node->right)); // Calculate height of node
    }

    void computeDiameter(TreeNode* node, int &diameter) {
        if (node == nullptr) return; 

        int lh = height(node->left);  // Get left subtree height
        int rh = height(node->right); // Get right subtree height

        diameter = max(diameter, lh + rh); // Update maximum diameter

        computeDiameter(node->left, diameter);  // Recurse left subtree
        computeDiameter(node->right, diameter); // Recurse right subtree
    }
};

/*
Time Complexity: O(n^2), where n is the number of nodes.
Space Complexity: O(h), where h is the height of the tree.
*/




// optmised



class Solution {
private: 
int diam(TreeNode* root, int& ans){
     if (root == nullptr) return 0;
        // standard height of the tree
        int lh =  diam(root->left, ans); 
         int rh =  diam(root->right, ans);
         
         // the max height of that new possible tree in reurssion while traversing 
          ans = max(ans , lh+rh);
         
         return  1+max(lh ,rh);
}
public:
    int diameterOfBinaryTree(TreeNode* root) {
       int ans=0; 
       diam(root, ans); 
       return ans ;

    }
};

/*
Time Complexity: O(n), where n is the number of nodes.
Space Complexity: O(h), where h is the height of the tree.
*/

