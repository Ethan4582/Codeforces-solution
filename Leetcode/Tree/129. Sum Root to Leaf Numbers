class Solution {
private:
    int dfs(TreeNode* root, string path) {
        if (!root) return 0;

        path += to_string(root->val);

        if (!root->left && !root->right)
            return stoi(path);

        return dfs(root->left, path) + dfs(root->right, path);
    }

public:
    int sumNumbers(TreeNode* root) {
        return dfs(root, "");
    }
};



class Solution {
private:
    int dfs(TreeNode* root, int currNum) {
        if (!root) return 0;

        currNum = currNum * 10 + root->val;

        if (!root->left && !root->right)
            return currNum;

       
        return dfs(root->left, currNum) + dfs(root->right, currNum);
    }

public:
    int sumNumbers(TreeNode* root) {
        return dfs(root, 0);
    }
};

