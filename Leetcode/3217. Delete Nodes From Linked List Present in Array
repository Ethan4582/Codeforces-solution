-----------------------------------------------------------------------------


so bruteforce for check each will be voilet the time constanrnt 

-------------------------------general appraoch

O(N*log(N))
O(1)

class Solution {
public:
    ListNode* modifiedList(vector<int>& v, ListNode* head) {
        // Create a dummy node to simplify the linked list manipulation
        ListNode *d = new ListNode(-1); // Dummy node with a placeholder value
        ListNode *t = d; // Pointer to track the end of the modified list

        // Create a set to store the values from the vector for O(1) lookups
        set<int> s; // Set to hold unique values from the vector
        for (auto i : v) // Iterate through each value in the vector
            s.insert(i); // Insert each value into the set

        // Iterate through the linked list
        while (head != NULL) { // Continue until we reach the end of the linked list
            // Check if the current node's value is not in the set
            if (s.find(head->val) == s.end()) { // If the value is NOT found in the set
                t->next = head; // Link the current node to the modified list
                t = t->next; // Move the pointer `t` to the newly added node
            }
            head = head->next; // Move to the next node in the original linked list
        }

        t->next = NULL; // Set the next pointer of the last node to NULL to terminate the modified list
        return d->next; // Return the modified linked list starting from the first valid node
    }
};

optmial ------------------------------------------------

Tc- o(N) 
Sc- 0(k) k is ht max freq
class Solution {
public:
    ListNode* modifiedList(vector<int>& nums, ListNode* head) {
        int max = -1;
        for (int num : nums) {
            max = num > max ? num : max;
        }

        vector<bool> freq(max + 1, false);

        for (int num : nums) {
            freq[num] = true;
        }

        ListNode* temp = new ListNode();
        ListNode* current = temp;

        while (head != nullptr) {
            if (head->val >= freq.size() || !freq[head->val]) {
                current->next = head;
                current = current->next;
            }
            head = head->next;
        }

        current->next = nullptr;

        return temp->next;
    }



-----------------------------------------------------------------------

Time Complexity:  O(m+n)
Space Complexity:  O(m)

class Solution {
public:
    ListNode* modifiedList(vector<int>& nums, ListNode* head) {
        // Create a set for O(1) lookup of values in nums
        unordered_set<int> numSet(nums.begin(), nums.end());

        // Create a dummy node to simplify the head removal process
        ListNode dummy(0);
        ListNode* current = &dummy;
        current->next = head;

        // Iterate through the linked list
        while (current->next != nullptr) {
            // If the next node's value is in the set, remove it
            if (numSet.find(current->next->val) != numSet.end()) {
                ListNode* nodeToRemove = current->next;
                current->next = current->next->next; // Skip the node
                delete nodeToRemove; // Free memory if necessary
            } else {
                current = current->next; // Move to the next node
            }
        }

        // Return the modified linked list
        return dummy.next;
    }
};
