----------------simple reurssion + memization-----------------------------

class Solution {
private:
    int solve(int i, int j, vector<vector<int>>& grid, vector<vector<int>>& memo) {
       
        if (i == 0 && j == 0) {
            return grid[i][j]; 
        }
        if (i < 0 || j < 0) {
            return INT_MAX; 
        }
        if (memo[i][j] != -1) {
            return memo[i][j];
        }
        int up = solve(i - 1, j, grid, memo);
        int left = solve(i, j - 1, grid,memo);

        memo[i][j] = grid[i][j] + min(up, left);

        return memo[i][j];
    }

public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();  
        int n = grid[0].size();
     
        vector<vector<int>> memo(m, vector<int>(n, -1));

        return solve(m - 1, n - 1, grid, memo); 
    }
};

------------------------------ bottom up apprach + Tabulation --------------------
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();  
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = grid[i][j]; 
                } else {
                    int up = (i > 0) ? dp[i - 1][j] : INT_MAX;
                    int left = (j > 0) ? dp[i][j - 1] : INT_MAX;
                    dp[i][j] = grid[i][j] + min(up, left);
                }
            }
        }
        return dp[m - 1][n - 1]; 
    }
};
----------------------- space optmized it -------------------------------------
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<int> prev(n, 0);  // Stores the previous row
        
        for (int i = 0; i < m; i++) {
            vector<int> curr(n, 0);  // Stores the current row
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    curr[j] = grid[i][j];  // Initialize start position
                } else {
                    int up = (i > 0) ? prev[j] : INT_MAX;  
                    int left = (j > 0) ? curr[j - 1] : INT_MAX;
                    curr[j] = grid[i][j] + min(up, left);
                }
            }
            prev = curr;  // Move current row to previous row
        }
        return prev[n - 1];  // Return last column value of last row
    }
};

