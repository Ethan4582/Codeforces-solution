

simple Brute [  recursive ]  - TLE 

Tc- 0(2^n)
Sc- 0(n)

class Solution {
private:
 int cntPos( int i , int n ){
    //end of the tree
    if(i>n){
        return 0;
    }
    if( i ==n){
        return 1;
    }
    // possibilty of 1 and 2
    return cntPos(i+1,n)+ cntPos(i+2, n);
 }
public:
    int climbStairs(int n) {
        // recursive call for the possibily of eith step be 1 or  2
        return cntPos( 0, n);
    }
};


class Solution {
private: 
    int helper(int n, vector<int>& dp) {
        if (n <= 1) {
            return 1; 
        }
        if (dp[n] != -1) {
            return dp[n];
        }
        dp[n] = helper(n - 1, dp) + helper(n - 2, dp);
        return dp[n];
    }
public:
    int climbStairs(int n) {
        vector<int> dp(n + 1, -1); 
        return helper(n, dp);
    }
};

	// optmize no recisive stack space 
	
	class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1 , -1); 

        dp[0]=1; dp[1]=1; 

        for(int i =2; i<=n; i++){
            dp[i]= dp[i-1] + dp[i-2]; 
        }

        return  dp[n]; 
    }
};
													 
// tabulation  
													 


opmized format   -> ifnanci fomat from dp logic 

// Time: O(N)
// Space: O(1)

class Solution {
public:
    int climbStairs(int n) {
        // finanoci format 
       if(n <= 0) return 0;
    if(n == 1) return 1;
    if(n == 2) return 2;
    
    int a = 2;
    int b = 1;
    int c = 0;
    // dp fibanocii series 
    for(int i=2; i<n; i++){
    	c = a + b;
    	b = a;
        a = c;
    }
    return c;
    }
};
	
	class Solution {
public:
    int climbStairs(int n) {
       
        int prv1=1,  prv2=1; 

        for(int i =2; i<=n; i++){
            int curr= prv1 + prv2; 
             prv1=prv2;
             prv2=curr; 
           
        }

        return  prv2; 
    }
};