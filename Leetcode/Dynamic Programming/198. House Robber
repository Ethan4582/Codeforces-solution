
TLE  
class Solution {
private: 
int solve( int idx ,vector<int>& nums ){
    if(idx>=nums.size()){
        return 0;
    }

    int le = nums[idx] + solve( idx+2 , nums);
    int rg= solve(idx+1, nums);

    return max(le , rg);
}
public:
    int rob(vector<int>& nums) {
        return solve( 0 , nums);
    }
};


// top up upporach 


class Solution {
private: 
    int solve(int idx, vector<int>& nums, vector<int>& dp) {
        if (idx >= nums.size()) {
            return 0;
        }

        if (dp[idx] != -1) {
            return dp[idx];
        }

        int le = nums[idx] + solve(idx + 2, nums, dp);
        int rg = solve(idx + 1, nums, dp);

        dp[idx] = max(le, rg);
        return dp[idx];
    }
public:
    int rob(vector<int>& nums) {
        vector<int> dp(nums.size(), -1);
        return solve(0, nums, dp);
    }
};



// - bottom apprach  tabulation 
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        vector<int> dp(n);
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = max(nums[i] + dp[i - 2], dp[i - 1]);
        }

        return dp[n - 1];
    }
};



//   space optmimzed  

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        if (n == 0) return 0; 
        if (n == 1) return nums[0];
        
        int prev2 = nums[0]; 
        int prev1 = max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            int curr = max(nums[i] + prev2, prev1); 
            prev2 = prev1; 
            prev1 = curr;  
        }
        
        return prev1; 
    }
};


