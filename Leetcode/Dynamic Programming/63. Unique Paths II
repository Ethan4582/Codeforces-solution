

------------------------ top down apprach ----------------------------
class Solution {
private: 
    int solve(int m, int n, vector<vector<int>>& obstacleGrid, vector<vector<int>>& memo) {

        if (m < 0 || n < 0) {
            return 0;
        }
        if (obstacleGrid[m][n] == 1) {
            return 0;
        }

        if (m == 0 && n == 0) {
            return 1; 
        }
        // Check if the result is already computed
        if (memo[m][n] != -1) {
            return memo[m][n];
        }


        memo[m][n] = solve(m - 1, n, obstacleGrid, memo) + solve(m, n - 1, obstacleGrid, memo);
        return memo[m][n];
    }

public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(); 
        int n = obstacleGrid[0].size();
        
       
        vector<vector<int>> memo(m, vector<int>(n, -1));
        
        return solve(m - 1, n - 1, obstacleGrid, memo);
    }
};


---------------------------Botton up approch ----------------------------------------

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        if(grid[0][0]==1) return 0;
        int m = grid.size(), n = grid[0].size();   
        vector<vector<int>> dp(m, vector<int>(n));
        dp[0][0] = 1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) continue;
                dp[i][j] = 0;
                if(grid[i][j]==1) continue;
                if(i>0) dp[i][j] += dp[i-1][j];
                if(j>0) dp[i][j] += dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};

-------------------- space optmization----------------------------
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        if(grid[0][0]==1) return 0;
        int m = grid.size(), n = grid[0].size();   
        vector<vector<int>> dp(m, vector<int>(n));
        dp[0][0] = 1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) continue;
                dp[i][j] = 0;
                if(grid[i][j]==1) continue;
                if(i>0) dp[i][j] += dp[i-1][j];
                if(j>0) dp[i][j] += dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};