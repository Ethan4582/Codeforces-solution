

------------------------ top down apprach ----------------------------
class Solution {
private: 
    int solve(int m, int n, vector<vector<int>>& obstacleGrid, vector<vector<int>>& memo) {

        if (m < 0 || n < 0) {
            return 0;
        }
        if (obstacleGrid[m][n] == 1) {
            return 0;
        }

        if (m == 0 && n == 0) {
            return 1; 
        }
        // Check if the result is already computed
        if (memo[m][n] != -1) {
            return memo[m][n];
        }


        memo[m][n] = solve(m - 1, n, obstacleGrid, memo) + solve(m, n - 1, obstacleGrid, memo);
        return memo[m][n];
    }

public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(); 
        int n = obstacleGrid[0].size();
        
       
        vector<vector<int>> memo(m, vector<int>(n, -1));
        
        return solve(m - 1, n - 1, obstacleGrid, memo);
    }
};


---------------------------Botton up approch ----------------------------------------



class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obs) {
      
         int m = obs.size(); 
        int n = obs[0].size();
         if (obs[0][0] == 1) return 0; // if already blocked 
        vector<vector<int>> memo(m, vector<int>(n));
         memo[0][0] = 1;
        for(int i =0 ; i<m ; i++){
            for(int j =0 ; j<n ; j++){
             if (obs[i][j] == 1) {
                    memo[i][j] = 0;  
                    continue;
                }
                 if (i == 0 && j == 0) {
                memo[i][j] = 1;
                continue;
            }
             int up = 0;
            int left = 0;

        
            if (i > 0)
                up = memo[i - 1][j];

          
            if (j > 0)
                left = memo[i][j - 1];

          
            memo[i][j] = up + left;
        }
    }

    return memo[m - 1][n - 1];
                
            }
};



-------------------- space optmization----------------------------



class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obs) {
      
         int m = obs.size(); 
        int n = obs[0].size();
       
       
        if (obs[0][0] == 1 || obs[m - 1][n - 1] == 1) return 0;
        
         vector<int> prev(n, 0);
          prev[0] = 1;
        
        for(int i =0 ; i<m ; i++){
            vector<int> temp(n , 0);
            for(int j =0 ; j<n ; j++){
             if (obs[i][j] == 1) {
                    temp[j] = 0;  
                    continue;
                }
                 if (i == 0 && j == 0) {
                temp[j] = 1;
                continue;
            }
             int up = 0;
            int left = 0;

        
            if (i > 0)
                up = prev[j];

          
            if (j > 0)
                left = temp[j - 1];

          
            temp[j] = up + left;
        }
        prev=temp;

    }
    return prev[n-1];

  }
};
