#ifndef LLONG_MIN
#define LLONG_MIN -9223372036854775807LL - 1
#endif

class Solution {
private: 
    long long solve(int i, int j1, int j2, vector<vector<int>>& grid, vector<vector<vector<long long>>>& dp) {
        int m = grid[0].size();
        if (i >= grid.size() || j1 < 0 || j1 >= m || j2 < 0 || j2 >= m) {
            return LLONG_MIN;
        }

        if (i == grid.size() - 1) {
            if (j1 == j2) {
                return grid[i][j1];
            } else {
                return (long long)grid[i][j1] + grid[i][j2];
            }
        }

        if (dp[i][j1][j2] != -1LL) {
            return dp[i][j1][j2];
        }

        long long maxi = LLONG_MIN;

        for (int di = -1; di <= 1; di++) {
            for (int dj = -1; dj <= 1; dj++) {
                long long curr;
                if (j1 == j2) {
                    curr = (long long)grid[i][j1] + solve(i + 1, j1 + di, j2 + dj, grid, dp);
                } else {
                    curr = (long long)grid[i][j1] + grid[i][j2] + solve(i + 1, j1 + di, j2 + dj, grid, dp);
                }
                maxi = max(curr, maxi);
            }
        }
        return dp[i][j1][j2] = maxi;
    }

public:
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<vector<long long>>> dp(n, vector<vector<long long>>(m, vector<long long>(m, -1LL)));

        return solve(0, 0, m - 1, grid, dp);
    }
};










-------------------------------------Tabulation--------------------------------------

class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<vector<long long>>> dp(n, 
            vector<vector<long long>>(m, vector<long long>(m, LLONG_MIN)));

        for (int j1 = 0; j1 < m; ++j1) {
            for (int j2 = 0; j2 < m; ++j2) {
                if (j1 == j2) {
                    dp[n - 1][j1][j2] = grid[n - 1][j1];
                } else {
                    dp[n - 1][j1][j2] = (long long)grid[n - 1][j1] + grid[n - 1][j2];
                }
            }
        }

        for (int i = n - 2; i >= 0; --i) {
            for (int j1 = 0; j1 < m; ++j1) {
                for (int j2 = 0; j2 < m; ++j2) {
                    long long currentMaxCherries = LLONG_MIN;

                    for (int di = -1; di <= 1; ++di) { 
                        for (int dj = -1; dj <= 1; ++dj) { 
                            int next_j1 = j1 + di;
                            int next_j2 = j2 + dj;

                            long long nextCherries = LLONG_MIN;

                            if (next_j1 >= 0 && next_j1 < m && next_j2 >= 0 && next_j2 < m) {
                                nextCherries = dp[i + 1][next_j1][next_j2];
                            }
                            
                            if (nextCherries != LLONG_MIN) {
                                long long curr;
                                if (j1 == j2) {
                                    curr = grid[i][j1];
                                } else {
                                    curr = (long long)grid[i][j1] + grid[i][j2];
                                }
                                currentMaxCherries = max(currentMaxCherries, curr + nextCherries);
                            }
                        }
                    }
                    dp[i][j1][j2] = currentMaxCherries;
                }
            }
        }

        return max(0LL, dp[0][0][m - 1]); 
    }
};



----------------------------- Space optmized-------------------------------

class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<long long>> next_dp(m, vector<long long>(m, LLONG_MIN));
        vector<vector<long long>> current_dp(m, vector<long long>(m, LLONG_MIN));

        for (int j1 = 0; j1 < m; ++j1) {
            for (int j2 = 0; j2 < m; ++j2) {
                if (j1 == j2) {
                    next_dp[j1][j2] = grid[n - 1][j1];
                } else {
                    next_dp[j1][j2] = (long long)grid[n - 1][j1] + grid[n - 1][j2];
                }
            }
        }

        for (int i = n - 2; i >= 0; --i) {
            for(int k1 = 0; k1 < m; ++k1) {
                for(int k2 = 0; k2 < m; ++k2) {
                    current_dp[k1][k2] = LLONG_MIN;
                }
            }

            for (int j1 = 0; j1 < m; ++j1) {
                for (int j2 = 0; j2 < m; ++j2) {
                    long long cirr;
                    if (j1 == j2) {
                        cirr = grid[i][j1];
                    } else {
                        cirr = (long long)grid[i][j1] + grid[i][j2];
                    }

                    long long maxi = LLONG_MIN;

                    for (int di = -1; di <= 1; ++di) { 
                        for (int dj = -1; dj <= 1; ++dj) { 
                            int next_j1 = j1 + di;
                            int next_j2 = j2 + dj;

                            if (next_j1 >= 0 && next_j1 < m && next_j2 >= 0 && next_j2 < m) {
                                if (next_dp[next_j1][next_j2] != LLONG_MIN) {
                                    maxi = max(maxi, next_dp[next_j1][next_j2]);
                                }
                            }
                        }
                    }
                    
                    if (maxi != LLONG_MIN) {
                        current_dp[j1][j2] = cirr + maxi;
                    }
                }
            }
            next_dp = current_dp; 
        }

        return max(0LL, next_dp[0][m - 1]); 
    }
};
