
 Recurssion 
  1. make indx  [ we express it in terms of days]
  2. do stuff [ we ned to make sre we carry something to track the last one]
  3. return  [ e have to return the max ]


  class Solution {
private: 
    int solve(int days, int last, vector<vector<int>>& arr) {
        int maxi = INT_MIN;
        
        if (days == 0) {
            for (int i = 0; i <= 2; i++) {
                if (arr[days][i] != last) {
                    maxi = max(maxi, arr[days][i]);
                }
            }
            return (maxi == INT_MIN) ? 0 : maxi; 
        }
        
        for (int i = 0; i <= 2; i++) {
            if (arr[days][i] != last) {
                int currpoint = arr[days][i] + solve(days - 1, i, arr);
                maxi = max(maxi, currpoint);
            }
        }
        
        return maxi;
    }
  
public:
    int maximumPoints(vector<vector<int>>& arr) {
        int n = arr.size();
        return solve(n - 1, -1, arr); 
    }
};



------------------ Top down apprach -----------------------------
class Solution {
   private: 
       int solve(int days, int last, vector<vector<int>>& dp, vector<vector<int>>& arr) {
           if (days == 0) {
               int maxi = INT_MIN;
               for (int i = 0; i <3; i++) {
                   if (arr[days][i] != last) {
                       maxi = max(maxi, arr[days][i]);
                   }
               }
               return (maxi == INT_MIN) ? 0 : maxi; 
           }
   
           
           if (dp[days][last + 1] != -1) {
               return dp[days][last + 1];
           }
   
           int maxi = INT_MIN;
           for (int i = 0; i <3; i++) {
               if (i != last) {
                   int currpoint = arr[days][i] + solve(days - 1, i, dp, arr);
                   maxi = max(maxi, currpoint);
               }
           }
   
           dp[days][last + 1] = maxi; 
           return maxi;
       }
     
   public:
       int maximumPoints(vector<vector<int>>& arr) {
           int n = arr.size();
           vector<vector<int>> dp(n, vector<int>(4, -1));
           return solve(n - 1, -1, dp, arr); 
       }
   };
   


   --------------------- Tabulation  bootm upproch ------------------- 

class Solution {
   public:
       int maximumPoints(vector<vector<int>>& arr) {
           int n = arr.size();
           vector<vector<int>> dp(n, vector<int>(4, 0));
   
           // Base case 
           dp[0][0] = max(arr[0][1], arr[0][2]);
           dp[0][1] = max(arr[0][0], arr[0][2]);
           dp[0][2] = max(arr[0][1], arr[0][0]);
           dp[0][3] = max(arr[0][0], max(arr[0][1], arr[0][2]));
   
           
           for (int days = 1; days < n; days++) {
               for (int last = 0; last < 4; last++) {
                   int maxi = INT_MIN;
                   for (int i = 0; i < 3; i++) {
                       if (i != last) {
                           int currpoint = arr[days][i] + dp[days - 1][i];
                           maxi = max(maxi, currpoint);
                       }
                   }
                   dp[days][last] = maxi;
               }
           }
   
           return dp[n - 1][3]; 
       }
   };
   
   /*
   Time Complexity: O(n * 4 * 3) = O(n)
   Space Complexity: O(n * 4) = O(n)
   */