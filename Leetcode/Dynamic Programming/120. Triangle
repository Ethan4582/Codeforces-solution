

--------Memeoization -------------------------------------

class Solution {
private: 
int solve(int i , int j , vector<vector<int>>& dp  ,vector<vector<int>>& t , int n){
    if(i==n-1){
        return t[i][j];
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    
    int down = solve(i+1, j , dp , t , n);
    int dig= solve(i+1 , j+1 , dp , t , n); 
  return   dp[i][j] = t[i][j] + min(down , dig);

}
public:
    int minimumTotal(vector<vector<int>>& t) {
        int n=t.size(); 
        vector<vector<int>> dp(n ,vector<int> (n ,-1));
        return solve(0,0, dp, t , n );
    }
};

---------------Tabulation--------------

class Solution {
public:
    int minimumTotal(vector<vector<int>>& t) {
        int n=t.size(); 
       vector<vector<int> > dp(n, vector<int>(n, 0));

       // the lowe bottom dp with all the possible value 
       for(int i =0 ; i <n; i++){
        dp[n-1][i]=t[n-1][i];
       }
       for(int i = n-2 ; i >=0 ;i--){
        for(int j = i; j >=0 ; j--){
            int down = t[i][j] + dp[i+1][j];
                int dig= t[i][j] + dp[i+1][j+1];
             dp[i][j] =  min(down , dig);
            
        }
       }
       return dp[0][0];
    }
};


----------------------space optmized

class Solution {
public:
    int minimumTotal(vector<vector<int>>& t) {
        int n=t.size(); 
       vector<int> front(n, 0);
       vector<int> curr(n, 0);

       // the lowe bottom dp with all the possible value 
       for(int i =0 ; i <n; i++){
        front[i]=t[n-1][i];
       }

       for(int i = n-2 ; i >=0 ;i--){
        for(int j = i; j >=0 ; j--){
            int down = t[i][j] + front[j];
                int dig= t[i][j] + front[j+1];
             curr[j] =  min(down , dig);
            
        }
        front=curr;
       }
       return front[0];
    }
};