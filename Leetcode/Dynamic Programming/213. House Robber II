

-------------- Brute force --------------------
class Solution {
private: 
int solve(int idx , int n  , vector<int> & nums){
     if(idx>=n){
        return 0;
    }

    int le = nums[idx] + solve( idx+2 ,n,  nums);
    int rg= solve(idx+1,n,  nums);

    return max(le , rg);
}
public:
    int rob(vector<int>& nums) {
        int n= nums.size();
        if(n==1){
            return nums.front();
        }
        if(n==2){
            return max( nums[0], nums[1]);
        }
       return max( solve( 0 , n-1,  nums) , solve( 2 ,  n ,nums)  ) ;
    }
};


--------------------- Top up apprach ---------------------------
class Solution {
private: 
    int solve(int idx, int n, vector<int>& dp, vector<int>& nums) {
        if (idx >= n) {
            return 0;
        }
        if (dp[idx] != -1) {
            return dp[idx];
        }

        int le = nums[idx] + solve(idx + 2, n, dp, nums);
        int rg = solve(idx + 1, n, dp, nums);

        dp[idx] = max(le, rg);
        return dp[idx]; 
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) {
            return nums.front();
        }
        if (n == 2) {
            return max(nums[0], nums[1]);
        }
        
       
        vector<int> dp1(n, -1);
        int case1 = solve(0, n - 1, dp1, nums);
        
        vector<int> dp2(n, -1);
        int case2 = solve(1, n, dp2, nums);

        return max(case1, case2); 
    }
};



-----------------------------Bottom up apprach  TABULATION ------------------------------- 



class Solution {
private: 
    int solve(int st, int ed, vector<int>& nums) {
        int n = ed - st + 1; 
        vector<int> dp(n);
    
        dp[0] = nums[st];
        dp[1] = max(nums[st], nums[st+1]);
      
        for (int i = 2; i < n; i++) {
            dp[i] = max(nums[st + i] + dp[i - 2], dp[i - 1]);
        }
        
        return dp[n - 1]; 
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) {
            return nums.front();
        }
        if (n == 2) {
            return max(nums[0], nums[1]);
        }
        
        int c1 = solve(0, n - 2, nums); 
        int c2 = solve(1, n - 1, nums);

        return max(c1, c2); 
    }
};




--------------------------space optmization---------------------- 


class Solution {
private: 
    int solve(int st, int ed, vector<int>& nums) {
        int n = ed - st + 1; 
       
        int p2 = nums[st];
        int p1 = max(nums[st], nums[st+1]);
      
        for (int i = 2; i < n; i++) {
            int curr = max(nums[st + i] + p2, p1);
            p2=p1 ; 
            p1=curr; 
        }
        
        return p1; 
    }
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) {
            return nums.front();
        }
        if (n == 2) {
            return max(nums[0], nums[1]);
        }
        
        int c1 = solve(0, n - 2, nums); 
        int c2 = solve(1, n - 1, nums);

        return max(c1, c2); 
    }
};



-------------------------------- space optmized -------------------------------------

class Solution {
public:
    int maximumPoints(vector<vector<int>>& arr) {
        int n = arr.size();
        vector<int> dp(4, 0); 
        dp[0] = max(arr[0][1], arr[0][2]);
        dp[1] = max(arr[0][0], arr[0][2]);
        dp[2] = max(arr[0][1], arr[0][0]);
        dp[3] = max(arr[0][0], max(arr[0][1], arr[0][2]));

       
        for (int days = 1; days < n; days++) {
            vector<int> temp(4, 0); 
            for (int last = 0; last < 4; last++) {
                int maxi = INT_MIN;
                for (int i = 0; i < 3; i++) {
                    if (i != last) {

                        int currpoint = arr[days][i] + dp[i];
                        maxi = max(maxi, currpoint);
                    }
                }
                temp[last] = maxi; // Store the maximum points for the current last activity
            }
            dp = temp; // Update dp to the current day's res
        }

        return dp[3]; 
    }
};
