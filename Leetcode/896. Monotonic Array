


Time complexity:
O(nâˆ—log(n))

Space complexity:
O(n)



class Solution {
public:
    bool isMonotonic(vector<int>& nums) {
        // Create a copy of the original vector
        vector<int> orig = nums; 

        // Sort the copied vector
        sort(orig.begin(), orig.end());

        // Create a reversed version of the sorted vector
        vector<int> rve = orig; // Copy the sorted vector to rve
        reverse(rve.begin(), rve.end()); // Reverse the sorted vector

        // Check if the original vector is equal to the sorted or reversed sorted vector
        return (orig == nums || rve == nums);
    }
};



// Time: O(N)
// Space: O(1)


class Solution {
public:
    bool isMonotonic(std::vector<int>& nums) {
        bool increasing = true; // Flag for increasing
        bool decreasing = true; // Flag for decreasing

        // Loop through the array to check for monotonicity
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > nums[i - 1]) {
                decreasing = false; // Not decreasing
            } else if (nums[i] < nums[i - 1]) {
                increasing = false; // Not increasing
            }
        }

        // If either increasing or decreasing is still true, the array is monotonic
        return increasing || decreasing;
    }
};
