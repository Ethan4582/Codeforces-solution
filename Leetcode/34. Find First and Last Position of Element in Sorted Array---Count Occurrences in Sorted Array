34. Find First and Last Position of Element in Sorted Array


basic implmentation 

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> result = {-1, -1};
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            if (nums[i] == target) {
                result[0] = i;
                break;
            }
        }
        
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] == target) {
                result[1] = i;
                break;
            }
        }
        
        return result;
    }
};


---------------------------------------------  Solution 2: Binary search solution (optimised) 

o find upper and lower bound 
Time Complexity: O(log n)

Space Complexity: O(1)

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int lower = lower_bound(nums.begin(), nums.end(), target) - nums.begin();
        int upper = upper_bound(nums.begin(), nums.end(), target) - nums.begin() - 1;
        
        if (lower <= upper) {
            return {lower, upper};
        } else {
            return {-1, -1};
        }
    }
};




class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int lower = findLowerBound(nums, target);
        int upper = findUpperBound(nums, target);
        
        if (lower <= upper) {
            return {lower, upper};
        } else {
            return {-1, -1};
        }
    }
    
    int findLowerBound(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        int result = nums.size();
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] >= target) {
                result = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        
        return result;
    }
    
    int findUpperBound(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        int result = -1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] <= target) {
                result = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        
        return result;
    }
};




//////////////////////////////////////////////////////////////////////

Solution 1. Binary Search (L <= R)

Pro:

M is always (L + R) / 2
Symmetrical and no-brainer: L = M + 1 and R = M - 1.
Con:

L and R might go out of boundary.
Solution: Simply do a out-of-boundary check.


// Time: O(logN)
// Space: O(1)
class Solution {
public:
    vector<int> searchRange(vector<int>& A, int target) {
        int N = A.size(), L = 0, R = N - 1;
        while (L <= R) {
            int M = (L + R) / 2;
            if (A[M] < target) L = M + 1;
            else R = M - 1;
        }
        if (L == N || A[L] != target) return {-1,-1};
        int left = L;
        R = N - 1;
        while (L <= R) {
            int M = (L + R) / 2;
            if (A[M] > target) R = M - 1;
            else L = M + 1;
        }
        return {left, R};
    }
};




olution 2. Binary Search (L < R)
Pro:

In the end, L and R points to the same position.
Con:

Need to think about setting L = M or R = M. Solution: 
Take the first binary search for example. If A[M] < target, we want to move L to M + 1 because A[M] != target. If A[M] >= target,
we want to move R to M. Since we are using R = M, we need to make sure M != R, thus we should round down M as (L + R) / 2.


// Time: O(logN)
// Space: O(1)
class Solution {
public:
    vector<int> searchRange(vector<int>& A, int target) {
        if (A.empty()) return {-1,-1};
        int N = A.size(), L = 0, R = N - 1;
        while (L < R) {
            int M = (L + R) / 2;
            if (A[M] < target) L = M + 1;
            else R = M;
        }
        if (A[L] != target) return {-1,-1};
        int left = L;
        L = 0, R = N - 1;
        while (L < R) {
            int M = (L + R + 1) / 2;
            if (A[M] > target) R = M - 1;
            else L = M;
        }
        return {left, L};
    }
};













---------------------------------------------Count Occurrences in Sorted Array-----------------

Bruteforce -  linear search simple for loop 

Optimal solution - Binary search 

Total number of occurrences = last occurrence - first occurrence + 1




int main() {
    int n, x, cnt = 0;
    cin >> n >> x;
    vi a(n);
    rep(i, 0, n) {
        cin >> a[i];
    }

    int lb = lower_bound(all(a), x) - a.begin();
    int ub = upper_bound(all(a), x) - a.begin() - 1;
    cnt = ub - lb + 1;

    p(cnt);
    return 0;
}


