//Brute force 

Time Complexity: O(N * (sum(weights[]) - max(weights[]) + 1)),


class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int l = *max_element(weights.begin(), weights.end()); // Maximum weight
        int r = accumulate(weights.begin(), weights.end(), 0); // Total weight

        // Binary search between l and r
        while (l < r) {
            int mid = l + (r - l) / 2; // To prevent overflow
            if (findDays(weights, mid) <= days) {
                r = mid; // Try for a smaller capacity
            } else {
                l = mid + 1; // Increase capacity
            }
        }

        return l; // The least weight capacity required
    }

private:
    int findDays(vector<int>& weights, int cap) {
        int days = 1; // Start from the first day
        int load = 0; // Current load
        int n = weights.size(); // Size of the array

        for (int i = 0; i < n; i++) {
            if (load + weights[i] > cap) {
                days += 1; // Move to the next day
                load = weights[i]; // Start new load with current weight
            } else {
                load += weights[i]; // Load the weight on the same day
            }
        }
        return days; // Return the total number of days needed
    }
};

///////////////////////////////////////////////////////////////////


class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int low = *max_element(weights.begin(), weights.end()); // Maximum weight
        int high = accumulate(weights.begin(), weights.end(), 0); // Total weight

        while (low < high) { // Corrected condition
            int mid = (low + high) / 2;
            int numberOfDays = findDays(weights, mid);
            if (numberOfDays <= days) { // Use 'days' instead of 'd'
                // Eliminate right half
                high = mid; // Change to mid (to include mid in the next search)
            } else {
                // Eliminate left half
                low = mid + 1;
            }
        }
        return low; // Return the minimum capacity required
    }

private:
    int findDays(vector<int>& weights, int cap) {
        int days = 1; // Start from the first day
        int load = 0; // Current load
        int n = weights.size(); // Size of the array

        for (int i = 0; i < n; i++) {
            if (load + weights[i] > cap) {
                days += 1; // Move to the next day
                load = weights[i]; // Start new load with current weight
            } else {
                load += weights[i]; // Load the weight on the same day
            }
        }
        return days; // Return the total number of days needed
    }
};













