https://leetcode.com/problems/design-neighbor-sum-service/solutions/5583231/hash-map-easy-and-clean-code-c-java-c-beats-100


#include <vector>
#include <unordered_map>
using namespace std;

class NeighborSum {
public:
    unordered_map<int, int> adj; 
    unordered_map<int, int> dig;

    NeighborSum(vector<vector<int>>& grid) {
        int m = grid.size(); // number of rows
        int n = grid[0].size(); // number of columns

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int val = grid[i][j];

                // Calculate adjacent sums
                if (i - 1 >= 0) adj[val] += grid[i - 1][j]; // Up
                if (i + 1 < m) adj[val] += grid[i + 1][j]; // Down
                if (j - 1 >= 0) adj[val] += grid[i][j - 1]; // Left
                if (j + 1 < n) adj[val] += grid[i][j + 1]; // Right

                // Calculate diagonal sums
                if (i + 1 < m && j + 1 < n) dig[val] += grid[i + 1][j + 1]; // Down-Right
                if (i + 1 < m && j - 1 >= 0) dig[val] += grid[i + 1][j - 1]; // Down-Left
                if (i - 1 >= 0 && j + 1 < n) dig[val] += grid[i - 1][j + 1]; // Up-Right
                if (i - 1 >= 0 && j - 1 >= 0) dig[val] += grid[i - 1][j - 1]; // Up-Left
            }
        }
    }
    
    int adjacentSum(int value) {
        return adj[value]; // Corrected variable name
    }
    
    int diagonalSum(int value) {
        return dig[value]; // Corrected variable name and added missing semicolon
    }
};

/**
 * Your NeighborSum object will be instantiated and called as such:
 * NeighborSum* obj = new NeighborSum(grid);
 * int param_1 = obj->adjacentSum(value);
 * int param_2 = obj->diagonalSum(value);
 */
