

//  brute force find the max left , mx right - height  caluate the water at ith  index

class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        int size = height.size();
        for (int i = 1; i < size - 1; i++) {
            int left_max = 0, right_max = 0;
            for (int j = i; j >= 0; j--) { // Search the left part for max bar size
                left_max = max(left_max, height[j]);
            }
            for (int j = i; j < size; j++) { // Search the right part for max bar size
                right_max = max(right_max, height[j]);
            }
            ans += min(left_max, right_max) - height[i];
        }
        return ans;
    }
};



Tc-0(3n); 
sc-0(2n)

class Solution {
public:
    int trap(vector<int>& h) {
        int n = h.size(); 

        vector<int> leftmx(n), rightmx(n);
        
        for( int i =1 ; i<n ; i++){
            // there will be height that will be lees that previos we need track the leftmax
            leftmx[i]=max(h[i-1], leftmx[i-1]); 
        }
         for( int i =n-2 ; i >=0 ; i--){
        
            rightmx[i]=max(h[i+1], rightmx[i+1]); 
        }

        int ans=0 ; 
        for( int i =0 ; i<n ; i++ ){
            int waterlvl=min(leftmx[i],rightmx[i] ); 
            if(waterlvl>=h[i]){
                ans+=waterlvl-h[i]; // so at the samller bounder it willbe zero
            }
        }
        
        return ans; 
    }
};


// same logic above


// Time: O(N)
// Space: O(N)
class Solution {
public:
    int trap(vector<int>& A) {
        int N = A.size(), ans = 0;
        stack<int> s;
        for (int i = 0; i < N; ++i) {
            while (s.size() && A[i] >= A[s.top()]) {
                int mid = s.top();
                s.pop();
                if (s.size()) ans += (i - s.top() - 1) * (min(A[i], A[s.top()]) - A[mid]);
            }
            s.push(i);
        }
        return ans;
    }
};


// Optmized  2 pointer apprach 


we need samller height amoun left_max and right_max as till lefsamller one i canhave water

we need to interation of left and right at the same time left_max and right_max

- we move in the direction of saller to larger 

when left -> right  we use leftmax to comapre the given i index the min water it can store  if lefthheight<=rightheight  

if(left>right)  we move right to left now as it smaller

for the i index the atter level is the min(left, rigthmx)- h[i]




class Solution {
public:
    int trap(vector<int>& A) {
         int i = 0, j = A.size() - 1, left = 0, right = 0, ans = 0;
         while( i <j){ // for equal we can pick anyone of it 
            if(A[i]<A[j]){
                left=max(left, A[i]); 
                ans+=left-A[i++]; //waterlevl at the curr idx
            }
            else{
                 right=max(right, A[j]); 
                ans+=right-A[j--]; //waterlevl at the curr idx
            }
         }

         return ans; 
    }
};