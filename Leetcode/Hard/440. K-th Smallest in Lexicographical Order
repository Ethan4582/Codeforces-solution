This can work but will give tle 

class Solution {
public:
    int findKthNumber(int n, int k) {
        vector<string> nums; // Vector to hold string representations of numbers
        for (int i = 1; i <= n; i++) {
            nums.push_back(to_string(i)); // Convert each number to string
        }
        
        sort(nums.begin(), nums.end()); // Sort the string representations

        return stoi(nums[k - 1]); // Convert the k-th string back to integer and return
    }
};



https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/solutions/92242/conciseeasy-to-understand-java-5ms-solution-with-explaination

class Solution {
private:
    int calcSteps(int n, long n1, long n2) {
        int steps = 0;
        while (n1 <= n) {
            steps += min((long)n + 1, n2) - n1;
            n1 *= 10;
            n2 *= 10;
        }
        return steps;
    }
public:
    int findKthNumber(int n, int k) {
        int i = 1;
        --k;
        while (k) {
            int steps = calcSteps(n, i, i + 1);
            if (steps <= k) {
                i += 1;
                k -= steps;
            } else {
                i *= 10;
                --k;
            }
        }
        return i;
    }
};