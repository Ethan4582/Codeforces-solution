
Brute forces - 

Approach
Matrix arr:
The matrix arr keeps track of how many times each player picks each color. The rows represent players, and the columns represent colors.
Winning Condition:
A player is considered a "winning player" if they have picked any color more times than their player index. This is checked using the condition arr[i][j] > i.

Complexity
Time complexity:
O(N)

Space complexity:
O(N)


class Solution {
public:
    int winningPlayerCount(int n, vector<vector<int>>& pick) {
        vector<vector<int>>arr(n,vector<int>(11,0));
        int ans=0;
        for(int i=0;i<pick.size();i++){
            int player=pick[i][0];
            int color=pick[i][1];
            arr[player][color]++;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<=10;j++){
                if(arr[i][j] >i){
                    ans++;
                    break;
                }
            }
        }
        return ans;
    }
};



class Solution {
public:
    int winningPlayerCount(int n, vector<vector<int>>& pick) {
         vector<vector<int>> a(n, vector<int>(11, 0));

        for (auto& p : pick) {
            int x = p[0];
            int y = p[1];
            a[x][y]++;
        }

        int c = 0;
        for (int i = 0; i < n; ++i) {
            int max_val = *max_element(a[i].begin(), a[i].end());
            if (max_val > i) {
                c++;
            }
        }

        return c;
    }
};


---------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3239. Minimum Number of Flips to Make Binary Grid Palindromic I


brute force 


#include <vector>
using namespace std;

class Solution {
public:
    int minFlips(vector<vector<int>>& grid) {
        int m = grid.size(); // number of rows
        if (m == 0) return 0; // handle empty grid
        int n = grid[0].size(); // number of columns

        // Function to count flips needed for palindromic rows
        int rowFlips = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n / 2; j++) {
                if (grid[i][j] != grid[i][n - 1 - j]) {
                    rowFlips++;
                }
            }
        }

        // Function to count flips needed for palindromic columns
        int colFlips = 0;
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < m / 2; i++) {
                if (grid[i][j] != grid[m - 1 - i][j]) {
                    colFlips++;
                }
            }
        }

        // Return the minimum flips required
        return min(rowFlips, colFlips);
    }
};


-------------------------Cleaner implmetion 

class Solution {
public:
    int minFlips(vector<vector<int>>& grid) {
        int row = 0,n = grid.size(),m = grid[0].size(),col = 0;
        for(int i = 0;i<n;i++){
            int j = 0;
            while(j != m){
                if(j < (m/2))row += (grid[i][j] != grid[i][m-j-1]);
                if(i < (n/2))col += (grid[i][j] != grid[n-i-1][j]);
                j++;
            }
        }
        return min(row,col);
    }
};

-------------------------------------------------------------------------------------------------

https://www.youtube.com/watch?v=G7CY3ID543Y&t=18s

3240. Minimum Number of Flips to Make Binary Grid Palindromic IIÂ¶
/* Approach : Palindrome property and edge case handling
1. For each (i, j), below 4 points should be same to satisfy row and column palindromic property
(i,j), (i, n - 1 - j), (m - 1 - i, j), (m - 1 - i, n - 1 -j)
1 2 2 1
0 0 0 0 
1 2 2 1

2. Middle odd row / middle odd column need to be handled specially as there will be only 2 palindromic points for them.
Since, at end count1's should be divisble by 4, we need to maintain onePairs count for middle odd row and column.
If these pairs are odd, then we need 2 more flips to make 1's count divisble by four.
However, if we have already made a flip to make palindromic row or column ->
we can use it to make count of 1 divisble by four. So no additional flip operation will be required.
3. Additionally, if both rows and colums are odd -> middle element need to be handled specially.
If it is 1 -> we need to convert it to 0. 
Time : O(m *n)
Space : O(1)



so for even we need to check for the 1/4 of the original matrix and rest corrosponding to reming then vertic become itself change 

the middle row can be handle in ase of odd the row and colum so we need to check it speratley 
class Solution {
public:
    int minFlips(vector<vector<int>>& grid) {
        int n=grid.size();
        int m= grid[0].size();
        int totalones=0;
        int ans=0;
        for(int i=0;i<n/2;i++){
            for(int j=0;j<m/2;j++){
                int ones=0;
                if(grid[i][j]==1) ones++;
                if(grid[i][m-j-1]==1) ones++;
                if(grid[n-i-1][j]==1) ones++;
                if(grid[n-i-1][m-j-1]==1) ones++;
                if(ones==4 || ones==0){
                    totalones+= ones;
                    continue;
                }
                else if(ones>=2){
                    // cout<<ones<<endl;
                    ans+=(4-ones);
                    totalones+=4;
                }else{
                    ans+= ones;
                }
            }
        }
        // cout<<ans<<endl;
        if(n%2==0 && m%2==0) return ans;
        int palinOnes=0;
        int onechange=0;
        if(m%2==1){
            for(int i=0;i<n/2;i++){
                if(grid[i][m/2]==1 && grid[n-i-1][m/2]==1) palinOnes++;
                if(grid[i][m/2]!= grid[n-i-1][m/2]){
                    ans++;
                    onechange++;
                }
            }
        }
        if(n%2==1){
            for(int i=0;i<m/2;i++){
                if(grid[n/2][i]==1 && grid[n/2][m-i-1]==1) palinOnes++;
                if(grid[n/2][i]!= grid[n/2][m-i-1]){
                    ans++;
                    onechange++;
                }
            }
        }
        if(palinOnes%2==1){
            if(onechange==0) ans+=2;
        }
        if(n%2==1 && m%2==1 && grid[n/2][m/2]==1) ans++;
        return ans;
    }
};
