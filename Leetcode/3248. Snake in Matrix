
Time complexity: O(n)
Space complexity: O(1)

class Solution {
public:
    int finalPositionOfSnake(int girdSize, vector<string>& commands) {
        int x = 0, y = 0, n = commands.size();
        for(int i = 0; i < n; i++){
            string s = commands[i];
            if(s == "UP"){
                x--;
            }
            else if(s == "DOWN"){
                x++;
            }
            else if(s == "RIGHT"){
                y++;
            }
            else{
                y--;
            }
        }
        return (x * girdSize) + y;
    }
};

class Solution {
public:
    int finalPositionOfSnake(int n, vector<string>& commands) {
        
        auto ans = [&](int a, int b) {
            return (a * n) + b;
        };

       
        int i = 0, j = 0; 
        int cnt = ans(i, j); // Initial position

        // Process each command
        for (int k = 0; k < commands.size(); k++) {
            if (commands[k] == "UP") {
                if (i > 0) i--; // Move up
            } else if (commands[k] == "DOWN") {
                if (i + 1 < n) i++; // Move down
            } else if (commands[k] == "LEFT") {
                if (j > 0) j--; // Move left
            } else if (commands[k] == "RIGHT") {
                if (j + 1 < n) j++; // Move right
            }

            // Update the position after each command
            cnt = ans(i, j);
        }

        return cnt;
    }
};
