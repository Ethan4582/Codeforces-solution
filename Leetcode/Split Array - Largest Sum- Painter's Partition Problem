Split Array - Largest Sum- Painter's Partition Problem

2 different question but approach 
The answer is between the maximum element and the sum of all the elements.

Let maxSum be the minimum subarray sum allowed. The greater this maxSum is, the more likely we can split A into m parts with maxSum as the maximum subarray sum -- let's call this valid.

There is a breakpoint that if maxSum is less than this value, we have to split A into more than m parts -- let's call this invalid.

We can use binary search to find the minimum valid maxSum.

Split Array Largest Sum (Hard)-
// Time: O(N * log(S)) where S is sum of nums.
// Space: O(1)


class Solution {
public:
    int splitArray(vector<int>& A, int m) {
        long sum = accumulate(begin(A), end(A), 0L);
        if (m == 1) return sum;
        long L = *max_element(begin(A), end(A)), R = sum, N = A.size();
        auto valid = [&](int maxSum) {
            int cnt = 1, i = 0 ;
            for (int sum = 0; i < N && cnt <= m; ++i) {
                sum += A[i];
                if (sum > maxSum) {
                    sum = A[i];
                    ++cnt;
                }
            }
            return i == N && cnt <= m;
        };
        while (L <= R) {
            long M = L + (R - L) / 2;
            if (valid(M)) R = M - 1;
            else L = M + 1;
        }
        return L;
    }
};




----------------------------------------------------------------------------------


// Time: O(N^2 * M)
// Space: O(NM)
class Solution {
public:
    int splitArray(vector<int>& A, int m) {
        int N = A.size();
        vector<vector<int>> dp(m + 1, vector<int>(N + 1, INT_MAX));
        dp[1][0] = 0;
        for (int i = 0; i < N; ++i) dp[1][i + 1] = dp[1][i] + A[i];
        for (int i = 2; i <= m; ++i) {
            for (int j = 0; j < N; ++j) {
                for (int k = j, sum = 0; k >= i - 1; --k) {
                    sum += A[k];
                    dp[i][j + 1] = min(dp[i][j + 1], max(sum, dp[i - 1][k]));
                    if (sum >= dp[i - 1][k]) break; // If `sum` is already no less than `dp[i-1][k]`, going left won't get smaller split sum. Break directly
                }
            }
        }
        return dp[m][N];
    }
};
